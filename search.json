[{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"recolorize-color-based-image-segmentation-for-people-with-other-things-to-do","dir":"Articles","previous_headings":"","what":"recolorize: color-based image segmentation (for people with other things to do)","title":"Introduction","text":"Introduction Step 0: Image acquisition preparation Step 1: Loading & processing images Step 2: Initial clustering Step 3: Refinement Step 4: Tweaks & edits Step 5: Visualizing & exporting output can also tour functions function gallery. recolorize package toolbox making color maps, essentially color-based image segmentation, using combination automatic, semi-automatic, manual procedures. four major goals: Provide middle ground automatic segmentation methods (hard modify don’t work well) manual methods (can slow subjective). deterministic whenever possible, always get results code. modular modifiable, can tailor purposes. Play nice color analysis tools. color map , example, generated using single function runs seconds (deterministic): Notice didn’t input: didn’t declare many colors expected (5), expect colors (red, green, blue, black, white), pixels include color patch, boundaries patches . introduction intended get running recolorize package. Ideally, reading , enough information start play around set tools provides way suits need . tried assume much reader’s background knowledge needs, except willing use R color segmentation problem solve can something interesting images. primarily work images animals (beetles, fish, lizards, butterflies, snakes, birds, etc), probably come documentation. work just well kinds images. Maybe better! hope package helpful , , share others might find helpful . lot fun discussions lot interesting people making , ’m grateful. something unclear find bug, please get touch file issue GitHub page. Suggestions improvements always welcome!","code":"library(recolorize)  # get the path to the image (comes with the package, so we use system.file): img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # fit a color map (only provided parameter is a color similarity cutoff) recolorize_obj <- recolorize2(img, cutoff = 45)"},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Introduction","text":"bare minimum start toying around package. basic recolorize workflow initial clustering step -> refinement step -> manual tweaks. Images first color-corrected background masked , ideally transparency, image , example (Chrysochroa corbetti, taken Nathan P. Lord, used permission egregiously downsampled ~250x150 pixels ). initial clustering step, bin pixels smaller number clusters, still expect end end. case, ’ll end 8 clusters (\\(2^3\\)):  Followed refinement step combine clusters similarity:  recolorize2 function calls functions sequence, since tend pretty effective combination. Finally, can manual refinements clean different color layers, example performing simple morphological operations individual layers:  color map ’re happy , can export variety formats. instance, wanted run Endler’s adjacency boundary strength analysis pavo package, using human perception:","code":"init_fit <- recolorize(img, method = \"hist\", bins = 2,                         color_space = \"sRGB\") #>  #> Using 2^3 = 8 total bins refined_fit <- recluster(init_fit, cutoff = 45) final_fit <- editLayer(refined_fit, 3,                         operation = \"fill\", px_size = 4) adj <- recolorize_adjacency(final_fit, coldist = \"default\", hsl = \"default\") #> Warning: no DISPLAY variable so Tk is not available #> Using single set of coldists for all images. #> Using single set of hsl values for all images. print(adj[ , grep(\"m_dL|m_dS\", colnames(adj))]) # just print the chromatic and achromatic boundary strength values #>      m_dS     m_dL #>  34.76376 38.88188"},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"batch-processing","dir":"Articles","previous_headings":"","what":"Batch processing","title":"Introduction","text":"can also batch process images using parameters, although recolorize functions deal one image time, use loop define new function call appropriate functions right order:  recolorize package mostly works internally objects class recolorize, contains different elements worth understanding work rest documentation (linked bottom).","code":"# get all 5 beetle images: images <- dir(system.file(\"extdata\", package = \"recolorize\"), \"png\", full.names = TRUE)  # make an empty list to store the results: rc_list <- vector(\"list\", length = length(images))  # run `recolorize2` on each image # you would probably want to add more sophisticated steps in here as well, but you get the idea for (i in 1:length(images)) {   rc_list[[i]] <- suppressMessages(recolorize2(images[i], bins = 2,                                cutoff = 30, plotting = FALSE)) }  # plot for comparison: layout(matrix(1:10, nrow = 2)) par(mar = rep(0, 4)) for (i in rc_list) {   plotImageArray(i$original_img)   plotImageArray(recoloredImage(i)) } # given the variety of colors in the dataset, not too bad,  # although you might go in and refine these individually  # and clean up our working space a bit rm(rc_list)"},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"the-recolorize-class","dir":"Articles","previous_headings":"Batch processing","what":"The recolorize class","title":"Introduction","text":"Objects S3 class recolorize lists several elements: original_img raster matrix, essentially matrix hex color codes. lightweight version typical 3D/4D color image array, can plotted easily running plot(final_fit$original_img). centers matrix RGB centers (0-1 range) color patches. order matches index values pixel_assignments matrix, can plotted color bar using plotColorPalette(final_fit$centers). sizes vector patch sizes, whose order matches row order centers. pixel_assignments paint--numbers matrix, pixel coded color center assigned. example, cells 1 assigned color represented row 1 centers. Background pixels marked 0. call set operations applied recolorize object: Every time modify recolorize object, new modification appended next item list, can recreate exactly make given color map. plot whole recolorize object, ’ll get back plot see : original image, color map (pixel recolored), color palette. can also plot individually: can get recolored image calling recoloredImage:  recoloredImage just shortcut function constructImage, lets decide colors assign category case want swap palette:  give good idea package works, ’s capable , different modular components go structure. toolbox single method, almost certainly need options. ’d like learn , recommend reading vignettes linked (order) steps messing around images. check GitHub (https://github.com/hiweller/recolorize) links examples using real data!","code":"attributes(final_fit) #> $names #> [1] \"original_img\"      \"pixel_assignments\" \"sizes\"             #> [4] \"centers\"           \"call\"              \"recolored_img\"     #>  #> $class #> [1] \"recolorize\" final_fit$call #> [[1]] #> recolorize(img = img, method = \"hist\", bins = 2, color_space = \"sRGB\") #>  #> [[2]] #> recluster(recolorize_obj = init_fit, cutoff = 45) #>  #> [[3]] #> editLayer(recolorize_obj = refined_fit, layer_idx = 3, operation = \"fill\",  #>     px_size = 4) # type = raster gets you a raster (like original_img); type = array gets you an  # image array recolored_img <- recoloredImage(final_fit, type = \"array\") par(mar = rep(0, 4)) plotImageArray(recolored_img) colors <- c(\"navy\", \"lightblue\", \"blueviolet\",             \"turquoise\", \"slateblue\", \"royalblue\",              \"aquamarine\", \"dodgerblue\") blue_beetle <- constructImage(final_fit$pixel_assignments,                 centers = t(col2rgb(colors) / 255))  # a very blue beetle indeed: par(mar = rep(0, 4)) plotImageArray(blue_beetle)"},{"path":[]},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"this-is-a-lot-of-options--how-do-i-choose-a-procedure","dir":"Articles","previous_headings":"General guidelines","what":"This is a lot of options. How do I choose a procedure?","title":"Introduction","text":"Recolorize toolbox, single algorithm. things less work; looks reasonable, . Keep mind big difference getting slightly different color maps getting qualitatively different results. Keep final goal mind. can also try lots different things see makes real difference. wish write single function steps correct sequence produce perfect results; reason function exist find experiment fair amount every image set, often end different order operations depending problem. Start recolorize2 identify common problems ’re encountering. make sense batch process images, refine individually? better choose different cutoff image? Luckily, functions relatively fast, can test different options. can also get way fancier cutoffs . package built pretty simple scaffolding: get starting set clusters, modify . better/refined way deciding colors cluster, go . soon adding example workflows collaborators helpful. another tempting option: make small training set nice color maps manually recolorize, use either fit statistical model fits use machine learning rest. think really compelling idea; just haven’t tested yet. Maybe want try ?","code":""},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"can-you-define-an-optimality-condition-to-do-all-the-segmentation-automatically","dir":"Articles","previous_headings":"General guidelines","what":"Can you define an optimality condition to do all the segmentation automatically?","title":"Introduction","text":"far can tell, . problem pointed beginning: ‘correct’ segmentation depends particular question anything else.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/Introduction.html","id":"what-about-batch-processing","dir":"Articles","previous_headings":"General guidelines","what":"What about batch processing?","title":"Introduction","text":"Every function package operates single image time. much variation people go batch processing anything: tried impose considered useful batch processing structure, within months find inflexible new project structure someone else needed use . , instead, idea can write batch processing functions loops needed suit data structure. maybe come something better can think , case, please let add package add author!","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step00_prep.html","id":"quick-version","dir":"Articles","previous_headings":"","what":"Quick version","title":"Step 0: Image acquisition and preparation","text":"‘correct’ color map depends question, define question start. can, take photographs camera, lighting setup, color/white balance. Mask background image, setting either transparent (recommended, works PNGs) uniform color (less effective, works JPEGs).","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step00_prep.html","id":"defining-your-questions","dir":"Articles","previous_headings":"","what":"Defining your question(s)","title":"Step 0: Image acquisition and preparation","text":"Color segmentation can real rabbit hole—, can pretty easy become fixated getting perfect results, trying define objective standard correct segmentation looks like. problem mindset ’s set universal parameters give perfect segmentation results every image, images alone don’t always contain relevant information: color variation due poor lighting one image just distinct color variation due pattern striations another. correct output color segmentation depends goal: concerned identifying regions structural vs. pigmented color? intensity stain slide matter, just presence/absence? dozen stray pixels wrong color image hundreds thousands correctly categorized pixels, meaningfully affect calculations? (last one can save lot angst.) Let’s take jewel beetle (family Buprestidae) images come package example. want segment lefthand image (Chrysochroa fulgidissima), solution depends question. question “placement size red bands compare closely related beetles?” really just want separate red bands rest body, want color map middle. question “much red bands stand iridescent green base beetle?” care brighter orange borders bands, increase boundary strength overall contrast beetle’s visual appearance—go map 2 right.  kinds questions, rigorous definitions color clustering. example, micaToolbox plug-ImageJ gives option use receptor noise-limited (RNL) clustering, color patches clustered using perceptual thresholds animal visual systems: chosen visual system discriminate two colors, combined single cluster. method doesn’t apply questions specifically one organism perceives another. Recolorize useful already defined accurate color map looks like research question, start, highly recommend writing precisely want measure end analysis, avoid becoming weighed details may matter. save lot time.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step00_prep.html","id":"image-acquisition","dir":"Articles","previous_headings":"","what":"Image acquisition","title":"Step 0: Image acquisition and preparation","text":"full discussion take good images color analysis beyond scope tutorial (probably author), lots guides already available. ideal case, images taken: camera, lighting conditions, color card /white balance kind visible photograph. uniform background (grey cardstock) also helpful. Images high enough resolution pattern elements interest can distinguished one another. ’s much point incredibly high-resolution image relatively large-scale pattern; don’t get extra information , takes longer process.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step00_prep.html","id":"image-preparation","dir":"Articles","previous_headings":"","what":"Image preparation","title":"Step 0: Image acquisition and preparation","text":"attempt image segmentation, need segmentable images. recolorize doesn’t process images beyond basic things like resizing, rotating, blurring (can help segmentation). image processing steps usually necessary getting quantitative color data, like white balance correction, gradient correction, background removal, inputting recolorize. lots software tools available making kinds corrections: GIMP, FIJI/ImageJ, even imager package provide options . really want get pipeline-y, Python much robust set image processing libraries help automatic color correction background masking, well beyond scope intro. concerned sensory biology animal vision, highly recommend micaToolbox, well-documented comprehensive toolkit creating images animals see (rather cameras computers see ); see especially instructions creating false color cone-mapped images. , corrections make really depend ’re trying . just care regions don’t really care final colors end assigned, probably don’t need worry much color correction; ’re working histology slides, probably don’t need mask background; really even diffuse lighting setup, probably won’t deal shadows gradients.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step00_prep.html","id":"background-masking","dir":"Articles","previous_headings":"","what":"Background masking","title":"Step 0: Image acquisition and preparation","text":"’re masking background, use transparencies. pretty easy GIMP, Photoshop, ImageJ. transparency layer (alpha channel) fourth channel image (three R, G, B channels), recolorize treats like binary mask: pixel alpha value 1 retained, pixel alpha value < 1 ignored. means don’t worry finding uniform background color sufficiently different foreground object every image, can otherwise real pain. Using transparency unambiguous, bonus benefit making nicer plots, , since don’t worry corners images overlapping blocking . images demo transparent backgrounds. However, can use lower upper arguments set boundaries excluding pixels background based color (see documentation). Just know set transparent internally.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step01_loading.html","id":"reading-an-image-into-r","dir":"Articles","previous_headings":"","what":"Reading an image into R","title":"Step 1: Loading & processing images","text":"can read image passing filepath readImage function. pretty generic function (almost every image processing package R something similar); recolorize version doesn’t even assign output special class (don’t try print ). image numeric array either 3 4 channels (R, G, B, optionally alpha transparency). JPG images 3 channels; PNG images 4. quite small image (243x116 pixels) 4 channels. can plot whole array image, plot one channel time. Notice red patches bright R channel, blue-B channel, green-G channel, etc—-white patch bright channels, black patches dark channels. alpha channel essentially just mask tells us parts image ignore processing .  Optionally, load image, can resize (highly recommended large images) rotate . Image processing computationally intensive, R especially good , downsampling usually good idea. good rule thumb downsampling want smallest details care image (say, spots ladybug) 5 pixels diameter (spots 20 pixel diameter, can set resize = 0.25). thing might images sending main recolorize functions blurImage. really useful minimizing color variation due texture (e.g. scales lizard, feathers bird, sensory hairs insect), can apply one several smoothing algorithms imager package, including edge-preserving blurs:  step optional: recolorize functions accept path image well image array.","code":"library(recolorize)  # define image path - we're using an image that comes with the package img_path <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # load image img <- readImage(img_path, resize = NULL, rotate = NULL)  # it's just an array with 4 channels: dim(img) #> [1] 243 116   4 layout(matrix(1:5, nrow = 1)) par(mar = c(0, 0, 2, 0)) plotImageArray(img, main = \"RGB image\") plotImageArray(img[ , , 1], main = \"R channel\") plotImageArray(img[ , , 2], main = \"G channel\") plotImageArray(img[ , , 3], main = \"B channel\") plotImageArray(img[ , , 4], main = \"Alpha channel\") blurred_img <- blurImage(img, blur_function = \"blur_anisotropic\",                          amplitude = 10, sharpness = 0.2)"},{"path":"https://hiweller.github.io/recolorize/articles/step02_initial_cluster.html","id":"the-recolorize-function","dir":"Articles","previous_headings":"","what":"The recolorize function","title":"Step 2: Initial clustering","text":"main recolorize function simple goal: take image huge number colors manageable number color clusters. falls category methods color quantization, although slightly different goal . typical reason color quantization simplify image making look visually similar possible original; goal represent original image, create set building blocks combine clean can refer whole color patches easily. look documentation recolorize function, ’ll see lot user-specifiable parameters. really 3 major ones: color space clustering done (color_space) clustering method (method argument) number color clusters (bins method = hist n method = kmeans) can also map image externally imposed set colors using another function, imposeColors, can useful batch processing images. ’ll go parameters . ’ll give mild advice navigate options, ’s reason ’ve included theme , think combination parameters can useful depending context.","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step02_initial_cluster.html","id":"color-spaces","dir":"Articles","previous_headings":"The recolorize function","what":"Color spaces","title":"Step 2: Initial clustering","text":"Color spaces ways represent colors points multi-dimensional spaces, axis corresponds aspect color. ’re probably familiar RGB (red-green-blue) color space HSV (hue-saturation-value) color space. RGB space, colors vary amount red, green, blue , coordinate [0, 0, 1] pure blue (red green), [1, 1, 1] white, [0, 1, 1] cyan, etc. images stored displayed computers, although ’s always intuitive. recolorize package gives variety options color spaces, far two commonly used RGB (color_space = sRGB) CIE Lab (color_space = Lab). CIE Lab popular approximates perceptual uniformity, means distances colors CIE Lab space proportional different actually seem human beings. axes represent luminance (L, 0 = black 100 = white), red-green (, negative values = green positive values = red), blue-yellow (b, negative values = blue positive values = yellow). idea something can greenish-blue, reddish-yellow, reddish-green, etc. can little confusing, results provides really intuitive. example, RGB space, red similar yellow black. CIE Lab, red yellow close together, equally far black. ’ve written detail color spaces another package , recommend reading detailed overview, let’s see happens plot non-background pixels C. corbetti example RGB compared CIE Lab color space (forgive crummy plotting):  can identify green, red, blue, black, white pixels sets plots, distributions different. practice, find toggling two color spaces depending color distributions images. example, dealing C. corbetti, use RGB, beetle literally red, green, blue. dealing red green C. fulgidissima , found CIE Lab produced better results, separates red green pixels much distance. general, especially increase number initial clusters, matters less stage refinement stage (can switch color spaces ). CIE Lab evenly distributed axes (.e. cube), may need use bins CIE Lab space RGB. (Try fitting C. corbetti image CIE Lab space see happens idea much choice color space can matter.)","code":"#> Warning: no DISPLAY variable so Tk is not available"},{"path":"https://hiweller.github.io/recolorize/articles/step02_initial_cluster.html","id":"clustering-methods","dir":"Articles","previous_headings":"The recolorize function","what":"Clustering methods","title":"Step 2: Initial clustering","text":"two clustering methods recolorize color histogram binning (fast, consistent, deterministic) k-means clustering (comparatively slower heuristic, intuitive). bins argument accessed histogram method, n goes kmeans method. highly recommend histogram binning unless good reason use , good reasons use k-means clustering sometimes. histogram binning method essentially just 3-dimensional color histogram: divide channel color space predetermined number bins, count number pixels fall bin calculate average color. , divide 3 color channels 2 bins, end \\(2^3 = 8\\) total bins (setting bins = 2 produce 8 colors ). k-means clustering, hand, well-known method partitioning data n clusters. just provide number clusters want, try find best locations , ‘best’ means minimizing squared Euclidean distances pixels color centers within cluster. appreciate differences, can fit number colors (27) using histogram method k-means method image, view resulting color distributions:   histogram method produced lot tiny, nearly-empty clusters evenly distributed color space, large clusters (like black white ones). k-means clustering method, hand, produced lot medium-sized clusters, well splitting black white patches across multiple clusters. lot color segmentation tools use k-means clustering (similar method), ’s relatively easy implement produce good results images clear color boundaries different colors (.e. pixels far apart color space). going stop initial clustering step, probably better option histogram binning reason. main reason recommend deterministic: get different colors, different order, every time run . example, fit 10 colors three separate times, get following color palettes:  colors similar, identical, returned arbitrary order. run code one day pull red clusters index, merge multiple green clusters, values change next time run code. need specify cluster numbers image less recommend using method unless reason. Binning colors (histograms) usually viable first step. ’s quite fast, since ’re really clustering; bins assign pixels every image, ’re calculating distances pixels assigned color. ’s also deterministic, means get result every single time run . downside makes approach almost guaranteed -split colors, since color regions rarely fall cleanly within boundaries bins, many bins end empty pixels.","code":"# fit 64 colors, both ways r_hist <- recolorize(corbetti, method = \"hist\", bins = 3, plotting = FALSE) #>  #> Using 3^3 = 27 total bins r_k <- recolorize(corbetti, method = \"k\", n = 37, plotting = FALSE)  par(mar = rep(1, 4)) plotColorClusters(r_hist$centers, r_hist$sizes, scaling = 30,                   plus = .05,                   xlab = \"red\", ylab = \"green\", zlab = \"blue\",                    main = \"Histogram method\",                   xlim = 0:1, ylim = 0:1, zlim = 0:1) plotColorClusters(r_k$centers, r_k$sizes, scaling = 30,                   plus = .05,                   xlab = \"red\", ylab = \"green\", zlab = \"blue\",                   main = \"k-means clustering\",                   xlim = 0:1, ylim = 0:1, zlim = 0:1) k_list <- lapply(1:3, function(i) recolorize(corbetti, \"k\", n = 10, plotting = F))  layout(1:3) par(mar = rep(1, 4)) plotColorPalette(k_list[[1]]$centers, k_list[[1]]$sizes) plotColorPalette(k_list[[2]]$centers, k_list[[2]]$sizes) plotColorPalette(k_list[[3]]$centers, k_list[[3]]$sizes)"},{"path":"https://hiweller.github.io/recolorize/articles/step02_initial_cluster.html","id":"number-of-clusters","dir":"Articles","previous_headings":"The recolorize function","what":"Number of clusters","title":"Step 2: Initial clustering","text":"Unlike color space binning method, parameter pretty intuitive: clusters fit, colors image split . ’s convenient use scheme every image dataset, might end using whatever values needed complex image -splitting images. ’s usually fine, next set steps try lump colors together remove minor details. want just granular enough capture details care , ’s okay colors split . One thing note bins argument allows different number bins channel. Setting bins = 2 divide channel 2 bins, can also set bins = c(5, 2, 2) divide red channel 5 bins blue green channels 2 bins (RGB space). can convenient lot color diversity one axis, e.g. photographs mammals shades reddish-brown, don’t need waste computational time dividing blue channel.","code":"# we can go from an unacceptable to an acceptable color map in  # CIE Lab space by adding a single additional bin in the luminance channel: r_hist_2 <- recolorize(corbetti, method = \"hist\", color_space = \"Lab\",                       bins = 2) #>  #> Using 2^3 = 8 total bins r_hist_322 <- recolorize(corbetti,                       method = \"hist\",                      bins = c(3, 2, 2)) #>  #> Using 3*2*2 = 12 bins"},{"path":"https://hiweller.github.io/recolorize/articles/step02_initial_cluster.html","id":"imposecolors","dir":"Articles","previous_headings":"","what":"imposeColors()","title":"Step 2: Initial clustering","text":"Another option impose colors image, rather using intrinsic image colors. Every pixel assigned color closest specified color space. Usually, useful batch processing: get colors one image, map onto another image, color centers correspond across images order.   really recommend using ’ve gotten color centers another image, mention function takes unclustered images.","code":"im1 <- system.file(\"extdata/ocellata.png\", package = \"recolorize\") im2 <- system.file(\"extdata/ephippigera.png\", package = \"recolorize\")  # fit the first image fit1 <- recolorize(im1) #>  #> Using 2^3 = 8 total bins # fit the second image using colors from the first # adjust_centers = TRUE would find the average color of all the pixels assigned to  # the imposed colors to better match the raw image fit2 <- imposeColors(im2, fit1$centers, adjust_centers = FALSE)"},{"path":"https://hiweller.github.io/recolorize/articles/step03_refinement.html","id":"recluster-and-recolorize2","dir":"Articles","previous_headings":"","what":"recluster() and recolorize2()","title":"Step 3: Refinement","text":"one use often, implementation really simple. function calculates Euclidean distances color centers recolorize object, clusters hierarchically using hclust, uses user-specified cutoff combine similar colors. recolorize, can choose color space, make big difference. Let’s see action:  Notice color dendrogram: lumped together clusters 4 & 7, clusters 3 & 5, clusters 6 & 8, distance less 45. CIE Lab space; use RGB space, range distances 0-1:  case, get results, always worth playing around . Despite simplicity, function highly effective producing intuitive results. partly , using color similarity combine clusters, penalize smaller color clusters can still retain important details. utility (speed), included wrapper function, recolorize2, run recolorize recluster sequentially single step:  ’s also lot room modification : pretty unsophisticated rule combining color clusters (ignoring, example, cluster size, proximity, geometry, boundary strength), ’s pretty simple write better rules can think , functions called implement also exported package.","code":"library(recolorize) corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") init_fit <- recolorize(corbetti, plotting = FALSE) #>  #> Using 2^3 = 8 total bins recluster_results <- recluster(init_fit,                                 cutoff = 45) recluster_rgb <- recluster(init_fit, color_space = \"sRGB\",                            cutoff = 0.5) # let's use a different image: img <- system.file(\"extdata/chongi.png\", package = \"recolorize\")  # this is identical to running: # fit1 <- recolorize(img, bins = 3) # fit2 <- recluster(fit1, cutoff = 50) chongi_fit <- recolorize2(img, bins = 3, cutoff = 45) #>  #> Using 3^3 = 27 total bins"},{"path":"https://hiweller.github.io/recolorize/articles/step03_refinement.html","id":"thresholdrecolor","dir":"Articles","previous_headings":"","what":"thresholdRecolor()","title":"Step 3: Refinement","text":"even simpler rule: drop smallest color clusters whose cumulative sum (proportion total pixels assigned) lower threshold, like 5% image. thought simple useful, every ’s just thing, especially always end weird spurious details.","code":"chongi_threshold <- thresholdRecolor(chongi_fit, pct = 0.1)"},{"path":"https://hiweller.github.io/recolorize/articles/step04_manual_tweak.html","id":"absorblayer","dir":"Articles","previous_headings":"","what":"absorbLayer","title":"Step 4: Tweaks & edits","text":"“Absorbs” part layer surrounding colors, optionally according size location condition.  function really useful, fair warning: can quite slow. works finding color patch highlighted component shares longest border switching highlighted component color, sophisticated simply switching patch color, requires many calculations. find using lot, ’s good idea make sure ’ve downsampled images using resize argument.","code":"ful_absorb <- absorbLayer(ful_init, layer_idx = 3,                            function(s) s <= 250,                           y_range = c(0, 0.8),                            highlight_color = \"cyan\")"},{"path":"https://hiweller.github.io/recolorize/articles/step04_manual_tweak.html","id":"editlayereditlayers","dir":"Articles","previous_headings":"","what":"editLayer/editLayers","title":"Step 4: Tweaks & edits","text":"Applies one several morphological operations imager layer (layers) recolorize object. can used despeckle, fill holes, uniformly grow shrink color patch. practice, mostly useful fixing small imperfections; anything drastic tends alter overall shape patch.  function also easy modify. Internally, splits color map individual masks using splitByColor() (another recolorize function), converts pixsets use imager slotting back unchanged layers.","code":"# cleans up some of the speckles in the above output ful_clean <- editLayers(ful_init, layer_idx = c(2, 5),                         operations = \"fill\", px_sizes = 3, plotting = T)"},{"path":"https://hiweller.github.io/recolorize/articles/step04_manual_tweak.html","id":"mergelayers","dir":"Articles","previous_headings":"","what":"mergeLayers","title":"Step 4: Tweaks & edits","text":"Sometimes, don’t want define fancy rules deciding layers combine; just want combine layers. ’s function . takes list numeric vectors layers combine (layers vector combined; different list elements kept separate).  might notice bit different recluster results . ’s internally, recluster actually uses imposeColors refit color map, rather just merging layers; found often produces slightly nicer results, pixels border one cutoff another don’t get stranded wrong layer. hand, mergeLayers considerably faster.","code":"corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") rc <- recolorize(corbetti, plotting = FALSE) #>  #> Using 2^3 = 8 total bins merge_fit <- mergeLayers(rc,                           merge_list = list(1, 2,                                             c(3, 5),                                            c(4, 7),                                            c(6, 8)))"},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"visualizations","dir":"Articles","previous_headings":"","what":"Visualizations","title":"Step 5: Exporting & visualizing output","text":"Making color maps obviously visual process, ’s good use visual feedback much possible. ’ve already seen functions action, specifically plotColorPalette plotImageArray, used almost every function produces recolorize object. ’ll point three others think quite useful: imDist, plotColorClusters, splitByColor (also doubles export function).","code":""},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"imdist","dir":"Articles","previous_headings":"Visualizations","what":"imDist","title":"Step 5: Exporting & visualizing output","text":"Compares two versions image calculating color distance colors pair pixels (imDist), gives options plotting results (imHeatmap). can use get distances original image color map: resulting object simple matrix distances pair pixels given color space. essentially residuals:  word warning : easy look decide come procedure automatically fitting color maps using kind AIC metric, trying get lowest SSE minimum set color centers. ’re welcome try , given discarding spatial information, probably general solution (haven’t much luck ). probably room play .","code":"library(recolorize) img <- system.file(\"extdata/ephippigera.png\", package = \"recolorize\") rc <- recolorize2(img, plotting = FALSE) #>  #> Using 2^3 = 8 total bins layout(matrix(1:2, nrow = 1)) par(mar = c(0, 0, 2, 1)) # calculates the distance matrix and plots the results dist_original <- imDist(readImage(img),                         recoloredImage(rc),                          color_space = \"sRGB\",                          main = \"Unscaled distances\")  # more plotting options - setting the range is important for comparing  # across images (max is sqrt(3) in sRGB space, ~120 in Lab) imHeatmap(dist_original, range = c(0, sqrt(3)),           main = \"Scaled distances\") hist(dist_original, main = \"sRGB distances\", xlab = \"Distance\")"},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"splitbycolor","dir":"Articles","previous_headings":"Visualizations","what":"splitByColor","title":"Step 5: Exporting & visualizing output","text":"dual-use function: splitting color map individual layers, can examine individual layers decide whether need editing merging, also get binary mask representing layer, can export individual patches.","code":"img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") rc <- recolorize2(img, cutoff = 45, plotting = FALSE) #>  #> Using 2^3 = 8 total bins layout(matrix(1:10, nrow = 2, byrow = TRUE)) par(mar = c(0, 0, 2, 0)) # 'overlay' is not always the clearest option, but it is usually the prettiest: layers <- splitByColor(rc, plot_method = \"overlay\")  # layers is a list of matrices, which we can just plot: for (i in 1:length(layers)) {   plotImageArray(layers[[i]], main = i) }"},{"path":[]},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"exporting-to-images","dir":"Articles","previous_headings":"Exporting","what":"Exporting to images","title":"Step 5: Exporting & visualizing output","text":"direct thing can simply export recolored images images, pass whatever tool ’d like use, although obviously doesn’t take full advantage format:","code":"# export color map recolorize_to_png(rc, filename = \"corbetti_recolored.png\")  # export individual layers from splitByColor for (i in 1:length(layers)) {   png::writePNG(layers[[i]],                 target = paste0(\"layer_\", i, \".png\")) }"},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"pavo-package","dir":"Articles","previous_headings":"Exporting","what":"pavo package","title":"Step 5: Exporting & visualizing output","text":"can also convert recolorize object classify object wonderful pavo package run adjacency analysis. Bonus points reflectance spectra color patches: combining spatial information color map coldist object generated spectral measurements, can run adjacency analysis visual system(s) choice right box! can also run adjacency analysis recolorize_adjacency, long keep skeptic hat . function works calculating coldist object right CIE Lab colors color maps, probably derived RGB image, best loose representation colors appear human eyes. reason reasonable ’s producing values human vision, able see ’s completely unreasonable. fine getting preliminary results ’re working aggregate data many sources ’re content specifically human (just non-UV, human) vision. Otherwise, ’s probably last resort.","code":"# convert to a classify object as_classify <- classify_recolorize(rc, imgname = \"corbetti\") adj_analysis <- pavo::adjacent(as_classify, xscale = 10)  # run adjacent directly using human perceptual color distances (i.e. no spectral data - proceed with caution) adj_human <- recolorize_adjacency(rc)"},{"path":"https://hiweller.github.io/recolorize/articles/step05_visualization_export.html","id":"patternize","dir":"Articles","previous_headings":"Exporting","what":"patternize","title":"Step 5: Exporting & visualizing output","text":"way patternize structured, going recolorize patternize slightly involved. See GitHub (https://github.com/hiweller) links worked example , general process : Load images patternize align list rasters, using e.g. alignLan(). Use brick_to_array convert list rasters list images. Cluster images normal, ensuring images set colors. Use recolorize_to_patternize convert clustered images back raster list. Proceed downstream patternize analyses.","code":""},{"path":"https://hiweller.github.io/recolorize/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannah Weller. Author, maintainer.","code":""},{"path":"https://hiweller.github.io/recolorize/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weller H (2022). recolorize: Color-Based Image Segmentation. https://hiweller.github.io/recolorize/, https://github.com/hiweller/recolorize.","code":"@Manual{,   title = {recolorize: Color-Based Image Segmentation},   author = {Hannah Weller},   year = {2022},   note = {https://hiweller.github.io/recolorize/, https://github.com/hiweller/recolorize}, }"},{"path":[]},{"path":"https://hiweller.github.io/recolorize/index.html","id":"color-based-image-segmentation-for-people-with-other-things-to-do","dir":"","previous_headings":"","what":"Color-based image segmentation (for people with other things to do).","title":"Color-Based Image Segmentation","text":"Comparison color maps produced using k-means clustering (center) vs. recolorize (right). Original image credits: Jack Randall, Nathan P. Lord, Alison Davis-Rabosky. Update, Apr. 2022: Please cite preprint ’re using package! (Also, please read preprint.) Update, Dec. 2021: recolorize now CRAN! Update, Sept. 2021: methods manuscript progress, meantime, need cite package, please cite abstract.","code":""},{"path":"https://hiweller.github.io/recolorize/index.html","id":"what-is-this","dir":"","previous_headings":"","what":"What is this?","title":"Color-Based Image Segmentation","text":"package making color maps, needed (least useful) wide range color analysis techniques. born conversations many biologists found, surprise mine, generating color maps bottleneck step analyses. Fully automated methods rarely work time, difficult modify, fully manual methods subjective time-consuming. package tries split difference giving mix tools pretty good job user input, allow minor manual changes like merging filtering layers splitting components, exporting next step analysis (e.g. pavo, patternize). ’s also, part, totally deterministic – arbitrary seed-setting repeatability.","code":""},{"path":"https://hiweller.github.io/recolorize/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Color-Based Image Segmentation","text":"Install package: run recolorize single image:  batch processing example:  See package vignettes detailed documentation.","code":"# development version: install.packages(\"devtools\") devtools::install_github(\"hiweller/recolorize\")  # OR  install.packages(\"recolorize\") # CRAN release library(recolorize)  # load an image that comes with the package: img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") rc <- recolorize2(img, cutoff = 45) # get list of all PNGs that come with the package: images <- dir(system.file(\"extdata\", package = \"recolorize\"),              pattern = \".png\", full.names = TRUE)  # for every image... for (i in 1:length(images)) {      # get an initial fit with generic clustering   init_fit <- recolorize2(images[i], method = \"hist\", bins = 2, cutoff = 25, plotting = FALSE)      # drop small patches   refined_fit <- thresholdRecolor(init_fit, pct = 0.01, plotting = FALSE)      # store in an output variable   if (i == 1) {     colormap_list <- list(refined_fit)   } else {     colormap_list[[i]] <- refined_fit   } }  # compare original to recolored images: layout(matrix(1:10, nrow = 2, byrow = TRUE)) par(mar = rep(0, 4)) o <- lapply(colormap_list, function(i) plot(i$original_img)) r <- lapply(colormap_list, function(i) plotImageArray(recoloredImage(i)))"},{"path":"https://hiweller.github.io/recolorize/index.html","id":"how-does-it-work","dir":"","previous_headings":"","what":"How does it work?","title":"Color-Based Image Segmentation","text":"Recolorize toolbox automatic, semi-automatic, manual methods aims give reproducible results work pretty well --box, easy tailor needs. general workflow initial clustering step -> automatic semi-automatic reclustering step -> optional manual refinements -> export another format, like image, set binary masks, another R package.","code":""},{"path":"https://hiweller.github.io/recolorize/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Color-Based Image Segmentation","text":"Please email something may relevant questions. features package result feedback, method developed vacuum. include example images email, likelihood responding goes roof. Email: hannahiweller@gmail.com","code":""},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Absorb a layer into its surrounding color patches — absorbLayer","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"Absorb layer surrounding color patches","code":""},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"","code":"absorbLayer(   recolorize_obj,   layer_idx,   size_condition = function(s) s <= Inf,   x_range = c(0, 1),   y_range = c(0, 1),   highlight_color = \"yellow\",   remove_empty_layers = TRUE,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"recolorize_obj recolorize object. layer_idx numeric index layer absorb. size_condition condition determining components absorb, written function. default (function(l) l <= Inf) affect components, since fewer infinity pixels. x_range, y_range rectangular bounding box (proportions image width length) selecting patches. Patches least partial overlap counted. Defaults (0-1) include entire image. See details. highlight_color Color highlighting affected layer. remove_empty_layers Logical. layer completely absorbed, remove layer indices renumber existing patches? (Example: completely absorb layer 3, layer 4 -> 3 5 -> 4, ). plotting Logical. Plot results?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"recolorize object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"function works splitting layer spatially distinct 'components' using imager::split_connected. contiguous region pixels considered single component. components satisfy size_condition location condition (specified via x_range y_range) absorbed, can target specific regions (ideally) minimum fuss. size_condition passed function must logical vector output (TRUE FALSE) applied vector sizes. Usually combination greater less statements, combined logical operators like & |. example, size_condition = function(x) x > 100 | x < 10 affect components greater 100 pixels fewer 10 pixels, 10-100 pixels. x_range y_range values set bounding box rectangular region proportions image axes, origin (0, 0) bottom left corner. patch least partial overlap bounding box considered satisfy condition. selecting region, can helpful plot grid image first narrow approximate region (see examples).","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/absorbLayer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absorb a layer into its surrounding color patches — absorbLayer","text":"","code":"# \\donttest{ img <- system.file(\"extdata/fulgidissima.png\", package = \"recolorize\")  # get an initial fit using recolorize + recluster: fit1 <- recolorize2(img, bins = 3, cutoff = 65, plotting = FALSE) #>  #> Using 3^3 = 27 total bins # this looks okay, but the brown patch (3) has some speckling # in the upper right elytron due to reflection, and the orange # patch (4) has the same issue  # the brown patch is easier to deal with, since size thresholding alone is # sufficient; we want to leave the stripes intact, so we'll absorb components # that are 50-250 pixels OR fewer than 20 pixels (to get the tiny speckles), # leaving the eyes intact fit2 <- absorbLayer(fit1, layer_idx = 3,                     size_condition = function(x) x <= 250 &                       x >= 50 |                       x < 20,                     highlight_color = \"cyan\")   # what about the orange speckles? this is more difficult, because # we want to retain the border around the brown stripes, but those patches # are quite small, so size thresholding won't work  # but we just want to target pixels in that one region, so we can first # determine a bounding box for it by plotting a grid: plotImageArray(constructImage(fit2$pixel_assignments,                     fit2$centers)) axis(1, line = 3); axis(2, line = 1) abline(v = seq(0, 1, by = 0.1),        h = seq(0, 1, by = 0.1),        col = grey(0.2),        lty = 2)  # x-axis range: 0.5-0.7 # y-axis range: 0.55-0.75 # let's try it: fit3 <- absorbLayer(fit2, layer_idx = 4,                     size_condition = function(x) x < 100,                     x_range = c(0.5, 0.7),                     y_range = c(0.55, 0.75),                     highlight_color = \"yellow\")  # looks pretty good # }"},{"path":"https://hiweller.github.io/recolorize/reference/add_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster image to a plot — add_image","title":"Add a raster image to a plot — add_image","text":"Adds raster image (3D array) existing plot image. silly, generic function, nice visualization. Sort like graphics::points, images.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/add_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster image to a plot — add_image","text":"","code":"add_image(obj, x = NULL, y = NULL, width = NULL, interpolate = TRUE, angle = 0)"},{"path":"https://hiweller.github.io/recolorize/reference/add_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster image to a plot — add_image","text":"obj array dimensions height x width x channels, read png::readPNG readImage, original_img recolored_img elements recolorize object. x, y x y coordinates image centered. width Image width, x-axis units. interpolate Passed graphics::rasterImage. Use linear interpolation scaling image? angle Passed graphics::rasterImage. angle (degrees) rotating image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/add_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster image to a plot — add_image","text":"Nothing; adds image existing plot window.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/add_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a raster image to a plot — add_image","text":"","code":"images <- dir(system.file(\"extdata\", package = \"recolorize\"),               \".png\", full.names = TRUE) x <- runif(5) y <- runif(5) plot(x, y,      xlim = range(x) + c(-0.2, 0.2),      ylim = range(y) + c(-0.2, 0.2)) for (i in 1:length(images)) {   img <- readImage(images[i])   add_image(img, x[i], y[i], width = 0.1) }"},{"path":"https://hiweller.github.io/recolorize/reference/adjust_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the saturation and brightness of a color — adjust_color","title":"Adjust the saturation and brightness of a color — adjust_color","text":"Adjusts saturation brightness RGB colors.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/adjust_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the saturation and brightness of a color — adjust_color","text":"","code":"adjust_color(   rgb_color,   which_colors = \"all\",   saturation = 1,   brightness = 1,   plotting = FALSE )"},{"path":"https://hiweller.github.io/recolorize/reference/adjust_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the saturation and brightness of a color — adjust_color","text":"rgb_color Matrix RGB colors (0-1 scale). which_colors indices colors change. Can numeric vector \"\" adjust colors. saturation Factor multiply saturation. > 1 = saturated, < 1 = less saturated. brightness Factor multiply brightness. plotting Logical. Plot resulting color palettes?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/adjust_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the saturation and brightness of a color — adjust_color","text":"matrix adjusted RGB colors.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/adjust_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the saturation and brightness of a color — adjust_color","text":"","code":"# generate a palette: p <- grDevices::palette.colors()  # convert to RGB using col2rgb, then divide by 255 to get it into a # 0-1 range: p <- t(col2rgb(p)/ 255 )  # we can adjust the saturation and brightness by the same factor: p_1 <- adjust_color(p, saturation = 2,                     brightness = 1.5,                     plotting = TRUE)   # or we can pass a vector for the factors: p_2 <- adjust_color(p,                     saturation = seq(0, 2, length.out = 9),                     plotting = TRUE)   # or we can target a single color: p_3 <- adjust_color(p, which_colors = 4,                     saturation = 2, brightness = 2,                     plotting = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/apply_imager_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply imager operations to layers of an image — apply_imager_operation","title":"Apply imager operations to layers of an image — apply_imager_operation","text":"Internal wrapper function applying several imager morphological operations cleaning pixsets.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/apply_imager_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply imager operations to layers of an image — apply_imager_operation","text":"","code":"apply_imager_operation(pixset, imager_function, ...)"},{"path":"https://hiweller.github.io/recolorize/reference/apply_imager_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply imager operations to layers of an image — apply_imager_operation","text":"pixset object class pixset. Usually layer splitByColor() converted pixset object. imager_function name imager morphological operation can performed pixset, passed string. See details. ... arguments passed imager function used.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/apply_imager_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply imager operations to layers of an image — apply_imager_operation","text":"resulting pixset applying specified morphological operation.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/apply_imager_operation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply imager operations to layers of an image — apply_imager_operation","text":"Current imager operations : imager::grow(): Grow pixset imager::shrink(): Shrink pixset imager::fill(): Remove holes pixset. Accomplished growing shrinking pixset. imager::clean(): Remove small isolated elements (speckle). Accomplished shrinking growing pixset.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_RasterStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from an array to a raster stack — array_to_RasterStack","title":"Convert from an array to a raster stack — array_to_RasterStack","text":"Convert image array raster stack, optionally using alpha channel mask.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_RasterStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from an array to a raster stack — array_to_RasterStack","text":"","code":"array_to_RasterStack(   img_array,   type = c(\"stack\", \"brick\"),   alpha_mask = TRUE,   return_alpha = FALSE )"},{"path":"https://hiweller.github.io/recolorize/reference/array_to_RasterStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from an array to a raster stack — array_to_RasterStack","text":"img_array RGB array. type Type Raster* object return. One either \"stack\" (raster::stack) \"brick\" (raster::brick). alpha_mask Logical. Use alpha channel background mask? return_alpha Logical. Return alpha channel layer?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_RasterStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from an array to a raster stack — array_to_RasterStack","text":"Raster* object, either RasterStack RasterBrick depending type argument.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_cimg.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts from a raster array to a cimg object — array_to_cimg","title":"Converts from a raster array to a cimg object — array_to_cimg","text":"says .","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_cimg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts from a raster array to a cimg object — array_to_cimg","text":"","code":"array_to_cimg(x, flatten_alpha = TRUE, bg = \"white\", rm_alpha = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/array_to_cimg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts from a raster array to a cimg object — array_to_cimg","text":"x image array, .e. read readPNG. flatten_alpha Logical. Flatten alpha channel? bg Passed imager::flatten.alpha(). Pixel color previously transparent pixels. rm_alpha Logical. Remove alpha channel? Note \"reveal\" whatever hidden behind transparent pixels, rather turn white.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/array_to_cimg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts from a raster array to a cimg object — array_to_cimg","text":"cimg object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a 2D matrix of pixels to specified colors — assignPixels","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"Assign 2D matrix pixels specified colors","code":""},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"","code":"assignPixels(   centers,   pixel_matrix,   color_space = \"Lab\",   ref_white = \"D65\",   adjust_centers = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"centers Matrix color centers (rows = colors, columns = channels). pixel_matrix Matrix pixel colors (rows = pixels, columns = channels). color_space Color space minimize distances, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\", \"XYZ\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. adjust_centers Logical. returned color clusters average value pixels assigned cluster? See details.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"list class color_clusters, containing: pixel_assignments: color center assignment pixel. centers: matrix color centers. adjust_centers = FALSE, identical input centers. sizes: number pixels assigned cluster.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"largely internal function called imposeColors() recoloring image based extrinsic colors. adjust_centers = TRUE, assigning pixels given color centers, location color center replaced average color pixels assigned center.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/assignPixels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a 2D matrix of pixels to specified colors — assignPixels","text":"","code":"# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan) ctrs <- matrix(c(1, 1, 1,                  0, 0, 0,                  1, 0, 0,                  0, 1, 0,                  0, 0, 1,                  1, 1, 0,                  1, 0, 1,                  0, 1, 1), byrow = TRUE, ncol = 3)  # plot it recolorize::plotColorPalette(ctrs)   # create a pixel matrix of random colors pixel_matrix <- matrix(runif(3000), ncol = 3)  # assign pixels reassigned <- recolorize::assignPixels(ctrs, pixel_matrix, adjust_centers = TRUE) recolorize::plotColorPalette(reassigned$centers)   # if we turn off adjust_centers, the colors remain the same as the inputs: keep.centers <- recolorize::assignPixels(ctrs, pixel_matrix, adjust_centers = FALSE) recolorize::plotColorPalette(keep.centers$centers)"},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a background condition for masking — backgroundCondition","title":"Generate a background condition for masking — backgroundCondition","text":"Internal function parsing potential background conditions. Prioritizes transparency masking conflicting options provided. See details.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a background condition for masking — backgroundCondition","text":"","code":"backgroundCondition(   lower = NULL,   upper = NULL,   center = NULL,   radius = NULL,   transparent = NULL,   alpha_channel = FALSE,   quietly = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a background condition for masking — backgroundCondition","text":"lower, upper RGB triplet ranges setting bounding box pixels mask. center, radius RGB triplet radius (proportion) masking pixels within spherical range. transparent Logical NULL. Use transparency mask? Requires alpha channel. alpha_channel Logical. alpha channel? quietly Logical. Print message background masking parameters?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a background condition for masking — backgroundCondition","text":"list background masking parameters. Can one 4 classes: bg_rect: lower upper specified. bg_sphere: center radius specified. bg_t: transparent TRUE alpha channel transparent pixels. bg_none: background masking specified (transparency specified transparent pixels).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a background condition for masking — backgroundCondition","text":"Prioritizes transparency. transparency = TRUE options (lower upper) specified, transparent pixels masked. transparency = TRUE alpha channel (JPEG image), flag ignored options (lower upper center radius) used instead. internal convenience function sourced backgroundIndex().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundCondition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a background condition for masking — backgroundCondition","text":"","code":"# masking a white background: backgroundCondition(lower = rep(0.9, 3), upper = rep(1, 3), quietly = FALSE) #> Masking pixels in range: #>  R: 0.9-1; G: 0.9-1; B: 0.9-1 #> $lower #> [1] 0.9 0.9 0.9 #>  #> $upper #> [1] 1 1 1 #>  #> attr(,\"class\") #> [1] \"bg_rect\"  # masking transparent pixels: backgroundCondition(transparent = TRUE, alpha_channel = TRUE, quietly = FALSE) #> Using transparency to mask pixels #> [1] \"transparent\" #> attr(,\"class\") #> [1] \"bg_t\"  # oops, no alpha channel: backgroundCondition(transparent = TRUE, alpha_channel = FALSE, quietly = FALSE) #> Using all pixels #> [1] NA #> attr(,\"class\") #> [1] \"bg_none\"  # oops, no alpha channel, but with white background as a fallback: backgroundCondition(lower = rep(0.9, 3), upper = rep(1, 3),                     transparent = TRUE, alpha_channel = FALSE,                     quietly = FALSE) #> Masking pixels in range: #>  R: 0.9-1; G: 0.9-1; B: 0.9-1 #> $lower #> [1] 0.9 0.9 0.9 #>  #> $upper #> [1] 1 1 1 #>  #> attr(,\"class\") #> [1] \"bg_rect\""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Index and remove background pixels for color clustering — backgroundIndex","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"Largely internal function identifying, indexing, removing background pixels image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"","code":"backgroundIndex(img, bg_condition)"},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"img image array, preferably output png::readPNG(), jpeg::readJPEG(), link[recolorize]{readImage}. bg_condition Background condition, output backgroundCondition().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"list following elements: flattened_img: original image, flattened 2D matrix (rows = pixels, columns = channels). img_dims: Dimensions original image. non_bg: Pixels flattened_img fall outside background masking conditions. Used color clustering analysis. idx: 2D (row-column) indices background pixels. idx_flat: idx, flattened vector order.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"function flattens 3-channel image 2D matrix indexing removing background pixels take advantage faster indexing procedures. idx, idx_flat, img_dims elements used reconstruct original recolored images functions.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/backgroundIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index and remove background pixels for color clustering — backgroundIndex","text":"","code":"# get image path and read in image img_path <- system.file(\"extdata/chongi.png\", package = \"recolorize\") img <- png::readPNG(img_path) recolorize::plotImageArray(img)   # generate a white background condition bg_condition <- backgroundCondition(lower = rep(0.9, 3),                                     upper = rep(1, 3))  # index background pixels bg_indexed <- backgroundIndex(img, bg_condition)  # we can reconstruct the original image from the flattened array img2 <- bg_indexed$flattened_img dim(img2) <- bg_indexed$img_dims  # notice the original background color (light gray) now shows recolorize::plotImageArray(img2)"},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Blur an image — blurImage","title":"Blur an image — blurImage","text":"Blurs image using one five blur functions imager. Useful decreasing image noise.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blur an image — blurImage","text":"","code":"blurImage(   img,   blur_function = c(\"medianblur\", \"isoblur\", \"blur_anisotropic\", \"boxblur\",     \"boxblur_xy\"),   ...,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blur an image — blurImage","text":"img image array, read png::readPNG readImage. blur_function string matching name imager blur function. One c(\"isoblur\", \"medianblur\", \"blur_anisotropic\", \"boxblur\", \"boxblur_xy\"). ... Parameters passed whichever blur_function called. plotting Logical. Plot blurred image next input comparison?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blur an image — blurImage","text":"image array blurred image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blur an image — blurImage","text":"parameters passed ... argument specific five blur functions; see documentation specify: imager::isoblur, imager::medianblur, imager::boxblur, imager::blur_anisotropic, imager::boxblur_xy. medianblur blur_anisotropic functions best preserving edges.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/blurImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blur an image — blurImage","text":"","code":"img_path <- system.file(\"extdata/fulgidissima.png\", package = \"recolorize\") img <- readImage(img_path) median_img <- blurImage(img, \"medianblur\", n = 5, threshold = 0.5)  anisotropic_img <- blurImage(img, \"blur_anisotropic\",                              amplitude = 5, sharpness = 0.1)  boxblur_img <- blurImage(img, \"boxblur\", boxsize = 5)   # save current graphical parameters: current_par <- graphics::par(no.readonly = TRUE) graphics::layout(matrix(1:4, nrow = 1))  plotImageArray(img, \"original\") plotImageArray(median_img, \"median\") plotImageArray(anisotropic_img, \"anisotropic\") plotImageArray(boxblur_img, \"boxblur\")   # and reset: graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/brick_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from a RasterBrick to an array — brick_to_array","title":"Convert from a RasterBrick to an array — brick_to_array","text":"Converts RasterBrick numeric array. Useful going patternize recolorize.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/brick_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from a RasterBrick to an array — brick_to_array","text":"","code":"brick_to_array(raster_brick)"},{"path":"https://hiweller.github.io/recolorize/reference/brick_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from a RasterBrick to an array — brick_to_array","text":"raster_brick object RasterBrick class.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/brick_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from a RasterBrick to an array — brick_to_array","text":"image array (probably 1, 3, 4 channels).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/brick_to_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert from a RasterBrick to an array — brick_to_array","text":"function provided convert RasterBrick objects provided alignment functions patternize package, e.g. alignLan.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cielab_coldist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","title":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","text":"stopgap function generating pavo::coldist object CIE Lab colors. pretty serious abstraction original intention coldist object, use combination spectra data, visual model, /receptor-noise model calculate perceived chromatic achromatic distances colors. CIE Lab color space approximately perceptually uniform color space human vision, can calculate version distances human viewer directly CIE Lab. decent option want preliminary results, care human perception, access spectral data.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cielab_coldist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","text":"","code":"cielab_coldist(rgbcols)"},{"path":"https://hiweller.github.io/recolorize/reference/cielab_coldist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","text":"rgbcols nx3 matrix RGB colors (rows colors columns R, G, B channels).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cielab_coldist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","text":"pavo::coldist object four columns: patches contrasted (columns 1-2), chromatic contrast (dS), achromatic contrast (dL), units Euclidean distance CIE Lab space.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cielab_coldist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a 'coldist' object for CIE Lab colors — cielab_coldist","text":"mixed feelings function like replace something little less hand-wavey.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cimg_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts from cimg to raster array — cimg_to_array","title":"Converts from cimg to raster array — cimg_to_array","text":"says .","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cimg_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts from cimg to raster array — cimg_to_array","text":"","code":"cimg_to_array(x)"},{"path":"https://hiweller.github.io/recolorize/reference/cimg_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts from cimg to raster array — cimg_to_array","text":"x cimg object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/cimg_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts from cimg to raster array — cimg_to_array","text":"3D array.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/classify_recolorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a recolorize object to a classify object — classify_recolorize","title":"Convert a recolorize object to a classify object — classify_recolorize","text":"Converts recolorize object pavo::classify object use pavo.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/classify_recolorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a recolorize object to a classify object — classify_recolorize","text":"","code":"classify_recolorize(recolorize_obj, imgname = \"\")"},{"path":"https://hiweller.github.io/recolorize/reference/classify_recolorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a recolorize object to a classify object — classify_recolorize","text":"recolorize_obj recolorize object. imgname Name image (string).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/classify_recolorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a recolorize object to a classify object — classify_recolorize","text":"pavo::classify object. background patch always first color (patch 1), white default.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/classify_recolorize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a recolorize object to a classify object — classify_recolorize","text":"mostly internal use, tested much.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/clean_merge_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up parameters passed to mergeLayers — clean_merge_params","title":"Clean up parameters passed to mergeLayers — clean_merge_params","text":"Internal function tidiness.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/clean_merge_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up parameters passed to mergeLayers — clean_merge_params","text":"","code":"clean_merge_params(recolorize_obj, merge_list, color_to)"},{"path":"https://hiweller.github.io/recolorize/reference/clean_merge_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up parameters passed to mergeLayers — clean_merge_params","text":"recolorize_obj Object recolorize class. merge_list List layers merge. color_to Argument coloring new layers.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/clean_merge_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up parameters passed to mergeLayers — clean_merge_params","text":"list mergeLayers parameters standardized format.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/col2col.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified convertColor — col2col","title":"Modified convertColor — col2col","text":"Just like grDevices::convertColor, HSV option.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/col2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified convertColor — col2col","text":"","code":"col2col(   pixel_matrix,   from = c(\"sRGB\", \"Lab\", \"Luv\", \"HSV\"),   to = c(\"sRGB\", \"Lab\", \"Luv\", \"HSV\"),   ref_white = \"D65\" )"},{"path":"https://hiweller.github.io/recolorize/reference/col2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified convertColor — col2col","text":"pixel_matrix matrix pixel colors, rows pixels columns channels. Color space convert . Color space convert . ref_white Reference white.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/col2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified convertColor — col2col","text":"pixel matrix specified color space.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/col2col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modified convertColor — col2col","text":"mother used say: good enough government work.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate color clusters from an image — colorClusters","title":"Generate color clusters from an image — colorClusters","text":"Clusters pixels image according specified method returns color centers, cluster assignments, cluster sizes.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate color clusters from an image — colorClusters","text":"","code":"colorClusters(   bg_indexed,   method = c(\"histogram\", \"kmeans\"),   n = 10,   bins = 3,   color_space = \"Lab\",   ref_white = \"D65\" )"},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate color clusters from an image — colorClusters","text":"bg_indexed list returned backgroundIndex(). method Binning scheme use, one either kmeans histogram. Produce different results (see details). n method = \"kmeans\", number colors fit. bins method = \"histogram\", either number bins per color channel (single number provided) vector length 3 number bins channel. color_space Color space cluster colors, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate color clusters from an image — colorClusters","text":"list following elements: pixel_assignments: vector color center assignments pixel. centers: matrix color centers, RGB color space. sizes: number pixels assigned cluster.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate color clusters from an image — colorClusters","text":"stats::kmeans() clustering tries find set n clusters minimize overall distances. Histogram binning divides color space according set breaks; example, bins = 2 divide red, green, blue channels 2 bins (> 0.5 < 0 .5), resulting 8 possible ranges. white pixel (RGB = 1, 1, 1) fall R \\> 0.5, G \\> 0.5, B \\> 0.5 bin. resulting centers represent average color pixels assigned bin. K-means clustering can produce intuitive results, iterative, find slightly different clusters time run, order arbitrary. also tends divide similar colors make majority image. Histogram binning produce results every time, order, forces bins dispersed throughout color space, tends better pick small color details. Bins also comparable across images. However, sometimes means returning empty bins (.e. white bin empty clustering dark image).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate color clusters from an image — colorClusters","text":"","code":"# make a 100x100 'image' of random colors img <- array(runif(30000), dim = c(100, 100, 3)) plotImageArray(img)   # make a background index object: bg_indexed <- backgroundIndex(img, backgroundCondition()) #> No pixels satisfying masking conditions; clustering all pixels  # histogram clustering hist_clusters <- colorClusters(bg_indexed, method = \"hist\", bins = 2) #>  #> Using 2^3 = 8 total bins plotColorPalette(hist_clusters$centers)   # we can use a different number of bins for each channel uneven_clusters <- colorClusters(bg_indexed, method = \"hist\",                                  bins = c(3, 2, 1)) #>  #> Using 3*2*1 = 6 bins plotColorPalette(uneven_clusters$centers)   # using kmeans kmeans_clusters <- colorClusters(bg_indexed, method = \"kmeans\",                                  n = 5) plotColorPalette(kmeans_clusters$centers)"},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersHist.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster pixel colors using histogram binning — colorClustersHist","title":"Cluster pixel colors using histogram binning — colorClustersHist","text":"Clusters pixel colors dividing color space specified bins, taking average color pixels within bin.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersHist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster pixel colors using histogram binning — colorClustersHist","text":"","code":"colorClustersHist(   pixel_matrix,   bins = 3,   color_space = c(\"Lab\", \"sRGB\", \"Luv\", \"HSV\"),   ref_white = \"D65\" )"},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersHist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster pixel colors using histogram binning — colorClustersHist","text":"pixel_matrix 2D matrix pixels classify (rows = pixels, columns = channels). bins Number bins channel vector length 3 bins channel. bins = 3 result 3^3 = 27 bins; bins = c(2, 2, 3) result 223 = 12 bins (2 red, 2 green, 3 blue RGB color space), etc. color_space Color space cluster colors, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersHist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster pixel colors using histogram binning — colorClustersHist","text":"list following elements: pixel_assignments: vector color center assignments pixel. centers: matrix color centers. sizes: number pixels assigned cluster.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersHist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster pixel colors using histogram binning — colorClustersHist","text":"Called colorClusters(). See documentation examples.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersKMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster pixel colors using K-means clustering — colorClustersKMeans","title":"Cluster pixel colors using K-means clustering — colorClustersKMeans","text":"Clusters pixel colors using stats::kmeans().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersKMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster pixel colors using K-means clustering — colorClustersKMeans","text":"","code":"colorClustersKMeans(   pixel_matrix,   n = 10,   color_space = \"Lab\",   ref_white = \"D65\" )"},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersKMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster pixel colors using K-means clustering — colorClustersKMeans","text":"pixel_matrix 2D matrix pixels classify (rows = pixels, columns = channels). n Number clusters fit. color_space Color space cluster colors, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\", \"XYZ\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersKMeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster pixel colors using K-means clustering — colorClustersKMeans","text":"list following elements: pixel_assignments: vector color center assignments pixel. centers: matrix color centers. sizes: number pixels assigned cluster.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorClustersKMeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster pixel colors using K-means clustering — colorClustersKMeans","text":"Called colorClusters(). See documentation examples.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorResiduals.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate squared residuals for color centers — colorResiduals","title":"Calculate squared residuals for color centers — colorResiduals","text":"Calculates squared distance pixel assigned color center.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorResiduals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate squared residuals for color centers — colorResiduals","text":"","code":"colorResiduals(   pixel_matrix,   pixel_assignments,   centers,   color_space = \"Lab\",   metric = \"euclidean\",   ref_white = \"D65\" )"},{"path":"https://hiweller.github.io/recolorize/reference/colorResiduals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate squared residuals for color centers — colorResiduals","text":"pixel_matrix 2D matrix pixels classify (rows = pixels, columns = channels). pixel_assignments vector color center assignments pixel. Must match order pixel_matrix. centers matrix color centers, rows centers columns color channels. Rows assumed match index values pixel_assignments, e.g. pixel assigned 1 assignment vector assigned color first row centers. color_space Color space calculate distances. One \"sRGB\", \"Lab\", \"Luv\", \"XYZ\". Passed grDevices::convertColor(). metric Distance metric used calculating pairwise pixel distances given color space; passed stats::dist(). ref_white Passed grDevices::convertColor() color_space = \"Lab. Reference white CIE Lab space.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorResiduals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate squared residuals for color centers — colorResiduals","text":"list following attributes: sq_residuals: squared residual every pixel pixel_matrix. tot_residuals: sum squared residuals. avg_residual: average squared residual. residuals_by_center: list squared residuals every color center. avg_by_center: average squared residual every color center.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/colorResiduals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate squared residuals for color centers — colorResiduals","text":"","code":"# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan) ctrs <- matrix(c(1, 1, 1,                  0, 0, 0,                  1, 0, 0,                  0, 1, 0,                  0, 0, 1,                  1, 1, 0,                  1, 0, 1,                  0, 1, 1), byrow = TRUE, ncol = 3)  # plot it recolorize::plotColorPalette(ctrs)   # create a pixel matrix of random colors pixel_matrix <- matrix(runif(3000), ncol = 3)  # assign pixels # see `assignPixels` function for details reassigned <- assignPixels(ctrs, pixel_matrix, adjust_centers = TRUE)  # find residuals from original color centers color_residuals <- colorResiduals(pixel_matrix = pixel_matrix,                                   pixel_assignments = reassigned$pixel_assignments,                                   centers = ctrs)  # compare to residuals from adjusted color centers color_residuals_adjust <- colorResiduals(pixel_matrix = pixel_matrix,                                   pixel_assignments = reassigned$pixel_assignments,                                   centers = reassigned$centers) # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  layout(matrix(1:2, nrow = 2)) hist(color_residuals$sq_residuals,  breaks = 30, border = NA, col = \"tomato\",  xlim = c(0, 1), xlab = \"Squared residual\",  main = \"Original centers\")  hist(color_residuals_adjust$sq_residuals, breaks = 30, border = NA, col = \"cornflowerblue\", xlim = c(0, 1), xlab = \"Squared residual\", main = \"Adjusted centers\")   graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/constructImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an image from pixel assignments and color matrix — constructImage","title":"Generate an image from pixel assignments and color matrix — constructImage","text":"Combines matrix pixel assignments corresponding matrix colors make recolored RGB image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/constructImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an image from pixel assignments and color matrix — constructImage","text":"","code":"constructImage(pixel_assignments, centers, background_color = \"white\")"},{"path":"https://hiweller.github.io/recolorize/reference/constructImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an image from pixel assignments and color matrix — constructImage","text":"pixel_assignments matrix index values pixel corresponds centers (e.g. 1 indicates pixel color first row centers). Pixels index value 0 considered background. centers n x 3 matrix color centers rows colors columns R, G, B channels. background_color numeric RGB triplet, hex code, named R color background. masked alpha channel (appear white plot window), revealed alpha channel removed. alpha channel background mask, 'baked ' background color.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/constructImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an image from pixel assignments and color matrix — constructImage","text":"image (raster) array recolored image, four channels (R, G, B, alpha).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit a color patch using morphological operations — editLayer","title":"Edit a color patch using morphological operations — editLayer","text":"Applies one several morphological operations imager layer recolorize object. Convenient cleaning color patch without affecting layers recolorized image. can used despeckle, fill holes, uniformly grow shrink color patch.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit a color patch using morphological operations — editLayer","text":"","code":"editLayer(   recolorize_obj,   layer_idx,   operation = \"clean\",   px_size = 2,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit a color patch using morphological operations — editLayer","text":"recolorize_obj recolorize object recolorize(), recluster(), imposeColors(). layer_idx single index value (numeric) indicating layer edit. Corresponds order colors centers attribute recolorize object, indices pixel_assignments attribute . operation name imager morphological operation perform layer, passed string. See details. px_size size (pixels) elements filter. operation = \"shrink\" px_size = 2, example, color patch shrunk 2-pixel radius. plotting Logical. Plot results?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit a color patch using morphological operations — editLayer","text":"recolorize object. sizes, pixel_assignments,, recolored_img attributes differ input object relevant color patch (layer) reflect edited layer.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit a color patch using morphological operations — editLayer","text":"Current imager operations : imager::grow(): Grow pixset imager::shrink(): Shrink pixset imager::fill(): Remove holes pixset. Accomplished growing shrinking pixset. imager::clean(): Remove small isolated elements (speckle). Accomplished shrinking growing pixset.","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/editLayer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit a color patch using morphological operations — editLayer","text":"","code":"# load image and recolorize it img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # first do a standard color binning init_fit <- recolorize(img, bins = 2, plotting = FALSE) #>  #> Using 2^3 = 8 total bins  # then cluster patches by similarity re_fit <- recluster(init_fit, cutoff = 40)    # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # examine individual layers: layout(matrix(1:6, nrow = 2)) layers <- splitByColor(re_fit, plot_method = \"color\")   # notice patch 2 (cream) - lots of stray pixels edit_cream_layer <- editLayer(re_fit,                               layer_idx = 2,                               operation = \"clean\",                               px_size = 3)   # shrinking and growing by the same element size gives us less flexibility, so # we can also shrink and then grow, using different px_size arguments: edit_green_1 <- editLayer(re_fit,                           layer_idx = 4,                           operation = \"shrink\",                           px_size = 2)  edit_green_2 <- editLayer(edit_green_1,                           layer_idx = 4,                           operation = \"grow\",                           px_size = 3)   # we can get pleasingly mondrian about it: new_fit <- re_fit for (i in 1:nrow(new_fit$centers)) {   new_fit <- editLayer(new_fit,                        layer_idx = i,                        operation = \"fill\",                        px_size = 5, plotting = FALSE) } plot(new_fit)   graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit multiple color patches using morphological operations — editLayers","title":"Edit multiple color patches using morphological operations — editLayers","text":"wrapper editLayer, allowing multiple layers edited , either morphological operation specified layer.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit multiple color patches using morphological operations — editLayers","text":"","code":"editLayers(   recolorize_obj,   layer_idx = \"all\",   operations = \"clean\",   px_sizes = 2,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit multiple color patches using morphological operations — editLayers","text":"recolorize_obj recolorize object recolorize(), recluster(), imposeColors(). layer_idx numeric vector layer indices edited, \"\" (case layers edited). Corresponds order colors centers attribute recolorize object, indices pixel_assignments attribute . operations Either single string character vector imager morphological operation(s) perform specified layer(s). shorter layer_idx, repeated match length layer_idx. px_sizes size(s) (pixels) elements filter. Either single number numeric vector. shorter layer_idx, repeated match length layer_idx. operation = \"shrink\" px_size = 2, example, color patch shrunk 2-pixel radius. plotting Logical. Plot results?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit multiple color patches using morphological operations — editLayers","text":"recolorize object. sizes, pixel_assignments,, recolored_img attributes differ input object relevant color patches (layers) reflect changes.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit multiple color patches using morphological operations — editLayers","text":"Current imager operations : imager::grow(): Grow pixset imager::shrink(): Shrink pixset imager::fill(): Remove holes pixset. Accomplished growing shrinking pixset. imager::clean(): Remove small isolated elements (speckle). Accomplished shrinking growing pixset.","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/editLayers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit multiple color patches using morphological operations — editLayers","text":"","code":"# load image and recolorize it img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # first do a standard color binning init_fit <- recolorize(img, bins = 2, plotting = FALSE) #>  #> Using 2^3 = 8 total bins  # then cluster patches by similarity re_fit <- recluster(init_fit, cutoff = 40)    # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # examine individual layers: layout(matrix(1:6, nrow = 2)) layers <- splitByColor(re_fit, plot_method = \"color\")   # we can clean them all using the same parameters... edited_fit <- editLayers(re_fit, layer_idx = \"all\",                          operations = \"clean\",                          px_sizes = 2, plotting = TRUE)  # ...but some of those patches don't look so good  # we can use different px_sizes for each layer: edited_fit_2 <- editLayers(re_fit, layer_idx = \"all\",                            operations = \"clean\",                            px_sizes = c(1, 3, 1,                                         2, 1, 2),                            plotting = TRUE)   # better yet, we can fill some layers and clean others: edited_fit_3 <- editLayers(re_fit, layer_idx = \"all\",                            operations = c(\"fill\", \"clean\",                                           \"fill\", \"fill\",                                           \"fill\", \"clean\"),                            px_sizes = c(2, 3,                                         2, 2,                                         4, 2))   # or you could just get weird: edited_fit_3 <- editLayers(re_fit, layer_idx = c(1:6),                            operations = c(\"fill\", \"clean\"),                            px_sizes = c(10, 20))   # reset graphical parameters: graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/expand_recolorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand aspects of a recolorize object for other functions — expand_recolorize","title":"Expand aspects of a recolorize object for other functions — expand_recolorize","text":"Expand aspects recolorize object functions","code":""},{"path":"https://hiweller.github.io/recolorize/reference/expand_recolorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand aspects of a recolorize object for other functions — expand_recolorize","text":"","code":"expand_recolorize(   recolorize_obj,   original_img = FALSE,   recolored_img = FALSE,   sizes = FALSE )"},{"path":"https://hiweller.github.io/recolorize/reference/expand_recolorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand aspects of a recolorize object for other functions — expand_recolorize","text":"recolorize_obj recolorize object. original_img Logical. Return original image numeric array? recolored_img Logical. Return recolored image numeric array? sizes Logical. Return cluster sizes (number pixels)?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/expand_recolorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand aspects of a recolorize object for other functions — expand_recolorize","text":"recolorize object indicated additional elements, well original elements.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot and group colors by similarity — hclust_color","title":"Plot and group colors by similarity — hclust_color","text":"wrapper stats::hclust clustering colors similarity. works converting matrix RGB centers given color space (CIE Lab default), generating distance matrix colors color space (subset channels color space), clustering , plotting labels colors. either cutoff final number colors provided return_list = TRUE, function also returns list color centers combine.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot and group colors by similarity — hclust_color","text":"","code":"hclust_color(   rgb_centers,   dist_method = \"euclidean\",   hclust_method = \"complete\",   channels = 1:3,   color_space = \"Lab\",   ref_white = \"D65\",   cutoff = NULL,   n_final = NULL,   return_list = TRUE,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot and group colors by similarity — hclust_color","text":"rgb_centers matrix RGB centers. Rows centers columns R, G, B values. dist_method Method passed stats::dist. One  \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" \"minkowski\". hclust_method Method passed stats::hclust. One \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). channels Numeric: color channels use clustering. Probably combination 1, 2, 3, e.g., consider luminance blue-yellow (b-channel) distance CIE Lab space, channels = c(1, 3 (L b). color_space Color space clustering. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. See grDevices::convertColor. cutoff Either NULL numeric cutoff passed stats::cutree. Distance combine clusters, .e. height tree cut. n_final Numeric. Desired number groups. Overrides cutoff provided. return_list Logical. Return list new group assignments cutoff n_final values? plotting Logical. Plot colored dendrogram?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot and group colors by similarity — hclust_color","text":"list group assignments (.e. centers belong groups), return_list = TRUE.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot and group colors by similarity — hclust_color","text":"mostly useful deciding color space place cutoff recolorize object, since fast. called recluster combining layers similarity.","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/hclust_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot and group colors by similarity — hclust_color","text":"","code":"# 50 random RGB colors rgb_random <- matrix(runif(150), nrow = 50, ncol = 3)  # default clustering (Lab space): hclust_color(rgb_random, return_list = FALSE)   # clustering in RGB space (note change in Y-axis scale): hclust_color(rgb_random, color_space = \"sRGB\", return_list = FALSE)   # clustering using only luminance: hclust_color(rgb_random, channels = 1, return_list = FALSE)   # or only red-green ('a' channel): hclust_color(rgb_random, channels = 2, return_list = FALSE)   # or only blue-yellow ('b' channel(: hclust_color(rgb_random, channels = 3, return_list = FALSE)   # use a cutoff to get groups: groups <- hclust_color(rgb_random, cutoff = 100)  print(groups) #> [[1]] #>  [1]  1  8 10 16 20 22 25 26 33 34 36 37 39 41 #>  #> [[2]] #>  [1]  2  6 14 19 27 28 31 35 40 45 49 50 #>  #> [[3]] #>  [1]  3 11 15 18 21 30 32 38 42 43 44 #>  #> [[4]] #>  [1]  4  5  7  9 12 13 17 23 24 29 46 47 48 #>"},{"path":"https://hiweller.github.io/recolorize/reference/imDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the distance between non-transparent pixels in images — imDist","title":"Calculates the distance between non-transparent pixels in images — imDist","text":"Compares two versions image (probably original recolored) calculating color distance colors pair pixels.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the distance between non-transparent pixels in images — imDist","text":"","code":"imDist(   im1,   im2,   color_space = c(\"Lab\", \"sRGB\", \"XYZ\", \"Luv\"),   ref_white = \"D65\",   metric = \"euclidean\",   plotting = TRUE,   palette = \"default\",   main = \"\",   ... )"},{"path":"https://hiweller.github.io/recolorize/reference/imDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the distance between non-transparent pixels in images — imDist","text":"im1, im2 Images compare; must dimensions. Distances calculated pair non-transparent pixels. color_space Color space calculate distances. One \"sRGB\", \"Lab\", \"Luv\", \"XYZ\". Passed grDevices::convertColor(). ref_white Passed grDevices::convertColor() color_space = \"Lab. Reference white CIE Lab space. metric Distance metric used calculating pairwise pixel distances given color space; passed stats::dist(). plotting Logical. Plot heatmap color distances? palette plotting, color palette used. Default blue red (colorRamps::blue2red(100)). main Plot title. ... Parameters passed graphics::image().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the distance between non-transparent pixels in images — imDist","text":"matrix dimensions original images, distance non-transparent pixels pixel coordinate. Transparent pixels returned NA.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the distance between non-transparent pixels in images — imDist","text":"","code":"fulgidissima <- system.file(\"extdata/fulgidissima.png\",                              package = \"recolorize\") fulgidissima <- png::readPNG(fulgidissima) # make an initial histogram fit # this doesn't look great: fulgidissima_2bin <- recolorize(fulgidissima, \"hist\", bins = 2) #>  #> Using 2^3 = 8 total bins   # we can compare with the original image by creating the recolored # image from the colormap recolored_2bin <- constructImage(fulgidissima_2bin$pixel_assignments,                                 fulgidissima_2bin$centers) dist_2bin <- imDist(im1 = fulgidissima,                     im2 = recolored_2bin)   # using 3 bins/channel looks much better: fulgidissima_3bin <- recolorize(fulgidissima, \"hist\", bins = 3) #>  #> Using 3^3 = 27 total bins   # and we can see that on the heatmap: recolored_3bin <- constructImage(fulgidissima_3bin$pixel_assignments,                                 fulgidissima_3bin$centers) dist_3bin <- imDist(im1 = fulgidissima,                     im2 = recolored_3bin)   # default behavior is to set the color range to the range of distances # in a single matrix; to compare two different fits, we have to provide # the same `zlim` scale for both r <- range(c(dist_2bin, dist_3bin), na.rm = TRUE)  # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # now we can plot them to compare the fits: layout(matrix(1:2, nrow = 1)) imHeatmap(dist_2bin, range = r) imHeatmap(dist_3bin, range = r)   # we can also use other color spaces: rgb_3bin <- imDist(fulgidissima,                    recolored_3bin,                    color_space = \"sRGB\")  # looks oddly worse, but to keep things in perspective, # you can set the range to the maximum color distance in RGB space: imHeatmap(rgb_3bin, range = c(0, sqrt(3)))  # not useful for troubleshooting, but broadly reassuring!  # reset: graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/imHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a heatmap of a matrix of color distances — imHeatmap","title":"Plot a heatmap of a matrix of color distances — imHeatmap","text":"Plots output imDist() heatmap.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a heatmap of a matrix of color distances — imHeatmap","text":"","code":"imHeatmap(   mat,   palette = \"default\",   main = \"\",   range = NULL,   legend = TRUE,   ... )"},{"path":"https://hiweller.github.io/recolorize/reference/imHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a heatmap of a matrix of color distances — imHeatmap","text":"mat color distance matrix, preferably output imDist(). palette color palette used. Default blue red (colorRamps::blue2red(100)). main Plot title. range Range heatmap values. Defaults range values matrix, set range images comparing heatmaps. legend Logical. Add continuous color legend? ... Parameters passed graphics::image().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a heatmap of a matrix of color distances — imHeatmap","text":"Nothing; plots heatmap color residuals.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a heatmap of a matrix of color distances — imHeatmap","text":"","code":"chongi <- system.file(\"extdata/chongi.png\", package = \"recolorize\") chongi <- png::readPNG(chongi) chongi_k <- recolorize(chongi, \"k\", n = 5)   recolored_chongi <- constructImage(chongi_k$pixel_assignments,                                    chongi_k$centers) d <- imDist(chongi,             recolored_chongi, plotting = FALSE)  # original flavor imHeatmap(d)   # bit offputting imHeatmap(d, palette = colorRamps::ygobb(100))   # just dreadful imHeatmap(d, palette = colorRamps::primary.colors(100))"},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Recolor an image to a provided set of colors — imposeColors","title":"Recolor an image to a provided set of colors — imposeColors","text":"Takes image set color centers, assigns pixel similar provided color. Useful producing set images identical colors.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recolor an image to a provided set of colors — imposeColors","text":"","code":"imposeColors(   img,   centers,   adjust_centers = TRUE,   color_space = \"sRGB\",   ref_white = \"D65\",   lower = NULL,   upper = NULL,   transparent = TRUE,   resid = FALSE,   resize = NULL,   rotate = NULL,   plotting = TRUE,   horiz = TRUE,   cex_text = 1.5,   scale_palette = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recolor an image to a provided set of colors — imposeColors","text":"img Path image (character vector) 3D image array read png::readPNG() {readImage}. centers Colors map , n x 3 matrix (rows = colors, columns = channels). adjust_centers Logical. pixel assignment, returned colors average color pixels assigned cluster, original colors? color_space Color space minimize distances. One \"sRGB\", \"Lab\", \"Luv\", \"HSV\", \"XYZ\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. lower, upper RGB triplet ranges setting bounding box pixels mask. See details. transparent Logical. Treat transparent pixels background? Requires alpha channel (PNG). resid Logical. Return list different residual metrics describe goodness fit? resize value 0 1 resizing image (ex. resize = 0.5 reduce image size 50%). Recommended large images can speed analysis considerably. See details. rotate Degrees rotate image clockwise. plotting Logical. Plot recolored image & color palette? horiz Logical plotting. Plot output image color palette side side (TRUE) stacked vertically (FALSE)? cex_text plotting = TRUE scale_palette = FALSE, size text display color palette numbers. scale_palette Logical. plotting, plot colors color palette proportional size cluster?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recolor an image to a provided set of colors — imposeColors","text":"list following attributes: original_img: original image, raster. centers: matrix color centers. adjust_centers = FALSE, identical input centers. sizes: number pixels assigned color cluster. pixel_assignments: vector color center assignments pixel. call: call(s) used generate recolorize object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recolor an image to a provided set of colors — imposeColors","text":"Background masking: lower, upper, transparent background masking conditions. Transparency unambiguous tends produce cleaner results, lower upper bounds can used instead treat pixels specific color range background. example, ignore white pixels (RGB = 1, 1, 1), might want mask pixels whose R, G, B values exceed 0.9. case, lower = c(0.9, 0.9, 0.9) upper = c(1, 1, 1). Regardless input background, recolored images returned transparent backgrounds adding alpha channel one already exist. Resizing: speed benefits downsizing images fairly obvious (fewer pixels = fewer operations). recoloring images simplifies detail anyways, downsizing prior recoloring run high risk losing important information. general guideline resizing distinguishable features interest still take least 2 pixels (preferably margin error) resized image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/imposeColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recolor an image to a provided set of colors — imposeColors","text":"","code":"# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan) ctrs <- matrix(c(1, 1, 1,                  0, 0, 0,                  1, 0, 0,                  0, 1, 0,                  0, 0, 1,                  1, 1, 0,                  1, 0, 1,                  0, 1, 1), byrow = TRUE, ncol = 3)  # plot it recolorize::plotColorPalette(ctrs)   # get image paths ocellata <- system.file(\"extdata/ocellata.png\", package = \"recolorize\")  # map to rgb extremes ocellata_fixed <- recolorize::imposeColors(ocellata, ctrs,                                             adjust_centers = FALSE)   # looks much better if we recalculate the centers from the image ocellata_adjusted <- recolorize::imposeColors(ocellata, ctrs,                                            adjust_centers = TRUE)   # we can map one image to extracted colors from another image # extract ocellata colors ocellata_colors <- recolorize(ocellata) #>  #> Using 2^3 = 8 total bins   # map fulgidissima to ocellata colors fulgidissima <- system.file(\"extdata/fulgidissima.png\",                              package = \"recolorize\")  fulgidissma_ocellata <- recolorize::imposeColors(fulgidissima,                        ocellata_colors$centers,                        adjust_centers = FALSE)"},{"path":"https://hiweller.github.io/recolorize/reference/labelCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Change colors of dendrogram tips — labelCol","title":"Change colors of dendrogram tips — labelCol","text":"Internal function recluster plotting.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/labelCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change colors of dendrogram tips — labelCol","text":"","code":"labelCol(x, hex_cols, pch = 20, cex = 2)"},{"path":"https://hiweller.github.io/recolorize/reference/labelCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change colors of dendrogram tips — labelCol","text":"x Leaf dendrogram. hex_cols Hex color codes colors change . pch type point draw. cex size point.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/labelCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change colors of dendrogram tips — labelCol","text":"hclust object colored tips.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/medianColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Change color centers to median color of all pixels assigned to it — medianColors","title":"Change color centers to median color of all pixels assigned to it — medianColors","text":"default, recolorize sets centers color patch average (mean) color pixels assigned . can sometimes result colors look washed , especially cases region shiny (e.g. black white reflective highlights average grey). cases, switching median colors may either accurate visually pleasing.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/medianColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change color centers to median color of all pixels assigned to it — medianColors","text":"","code":"medianColors(recolorize_obj, plotting = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/medianColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change color centers to median color of all pixels assigned to it — medianColors","text":"recolorize_obj recolorize class object. plotting Logical. Plot results?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/medianColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change color centers to median color of all pixels assigned to it — medianColors","text":"recolorize object, median colors instead average colors centers attribute.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge layers in a recolorized image — mergeLayers","title":"Merge layers in a recolorized image — mergeLayers","text":"Merges specified layers recolorized image. good option want manually specify layers merge (color make resulting merged layer); also called recolorize functions like recluster() merge layers identified highly similar color using given distance metric.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge layers in a recolorized image — mergeLayers","text":"","code":"mergeLayers(   recolorize_obj,   merge_list = NULL,   color_to = \"weighted average\",   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge layers in a recolorized image — mergeLayers","text":"recolorize_obj object class \"recolorize\", recolorize(), recluster(), imposeColors(). merge_list list numeric vectors specifying layers merge. Layers included list unchanged. See examples. color_to Color(s) merged layers. See examples. plotting Logical. Plot results layer merging next original color fit comparison?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge layers in a recolorized image — mergeLayers","text":"recolorize class object merged layers. order returned layers depends merge_list: first layers included list, followed new merged layers. start layers 1-8 merge layers 4 & 5 7 & 8, returned 5 layers , order terms original layers: 1, 2, 3, 6, 4 & 5 (merged), 7 & 8 (merged). probably easiest see examples.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge layers in a recolorized image — mergeLayers","text":"Colors can supplied numeric RGB triplets (e.g. c(1, 1, 1) white), valid R color name (\"white\"), hex code (\"#FFFFFF). Alternatively, color_to = \"weighted average\" set merged layer average color layers merged, weighted relative size. Must either single value vector length merge_list. single color supplied, merged layers set color (really useful already merging layers single layer).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/mergeLayers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge layers in a recolorized image — mergeLayers","text":"","code":"# image path: img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # initial fit, 8 bins: init_fit <- recolorize(img) #>  #> Using 2^3 = 8 total bins  # redundant green, red, and blue clusters  # to make it easier to see, we can plot the numbered palette: plot(init_fit)   # based on visual inspection, we should merge: mlist <- list(c(3, 5),               c(4, 7),               c(6, 8))  # we can merge with that list, leaving layers 1 & 2 intact: vis_merge <- mergeLayers(init_fit,                          merge_list = mlist)   # we can include layers 1 & 2 as their own list elements, # leaving them intact (result is identical to above): mlist2 <- list(1, 2,                c(3, 5),                c(4, 7),                c(6, 8)) redundant_merge <- mergeLayers(init_fit,                                merge_list = mlist2)  # we can also swap layer order this way without actually merging layers: swap_list <- list(2, 5, 3, 4, 1) swap_layers <- mergeLayers(redundant_merge,                            merge_list = swap_list)   # merging everything but the first layer into a single layer, # and making that merged layer orange (result looks # a bit like a milkweed bug): milkweed_impostor <- mergeLayers(init_fit,                                  merge_list = list(c(2:8)),                                  color_to = \"orange\")   # we can also shuffle all the layer colors while # leaving their geometry intact: centers <- vis_merge$centers centers <- centers[sample(1:nrow(centers), nrow(centers)), ] shuffle_layers <- mergeLayers(vis_merge,                               merge_list = as.list(1:5),                               color_to = centers)  # (this is not really the intended purpose of this function)"},{"path":"https://hiweller.github.io/recolorize/reference/pixelAssignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make pixel assignment matrix for recoloring — pixelAssignMatrix","title":"Make pixel assignment matrix for recoloring — pixelAssignMatrix","text":"Internal function. Generates sort 'paint--numbers' matrix, cell index color color centers matrix pixel assigned. index 0 indicates background pixel.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/pixelAssignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make pixel assignment matrix for recoloring — pixelAssignMatrix","text":"","code":"pixelAssignMatrix(bg_indexed, color_clusters)"},{"path":"https://hiweller.github.io/recolorize/reference/pixelAssignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make pixel assignment matrix for recoloring — pixelAssignMatrix","text":"bg_indexed object returned backgroundIndex(). color_clusters object returned colorClusters().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/pixelAssignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make pixel assignment matrix for recoloring — pixelAssignMatrix","text":"matrix pixel color assignments (pixel_assignments) corresponding dataframe color centers (centers).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot recolorized image results — plot.recolorize","title":"Plot recolorized image results — plot.recolorize","text":"S3 plotting method objects class recolorize. Plots side--side comparison original image recolorized version, plus color palette used recoloring.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot recolorized image results — plot.recolorize","text":"","code":"# S3 method for recolorize plot(x, ..., plot_original = TRUE, horiz = TRUE, cex_text = 2, sizes = FALSE)"},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot recolorized image results — plot.recolorize","text":"x object class recolorize, returned recolorize(), recluster(), imposeColors(), etc. ... arguments passed plot. plot_original Logical. Plot original image comparison? horiz Logical. plots stacked vertically horizontally? cex_text Text size printing color indices. Plotting parameters passed [recolorize]{plotColorPalette}. sizes Logical. TRUE, color palette plotted proportional size color. FALSE, colors take equal amount space, indices printed reference.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot recolorized image results — plot.recolorize","text":"return value; plots original image, recolored image, color palette.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot recolorized image results — plot.recolorize","text":"","code":"corbetti <- system.file(\"extdata/corbetti.png\",                          package = \"recolorize\")  corbetti_recolor <- recolorize(corbetti, method = \"hist\",                                          bins = 2, plotting = FALSE) #>  #> Using 2^3 = 8 total bins  # unscaled color palette plot(corbetti_recolor)   # scaled color palette plot(corbetti_recolor, sizes = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorizeVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a recolorizeVector object — plot.recolorizeVector","title":"Plot a recolorizeVector object — plot.recolorizeVector","text":"Plots object generated recolorizeVector.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorizeVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a recolorizeVector object — plot.recolorizeVector","text":"","code":"# S3 method for recolorizeVector plot(x, ...)"},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorizeVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a recolorizeVector object — plot.recolorizeVector","text":"x Object returned recolorizeVector. ... arguments passed graphics::plot.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plot.recolorizeVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a recolorizeVector object — plot.recolorizeVector","text":"return value; plots recolorizeVector polygons.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot color clusters in a color space — plotColorClusters","title":"Plot color clusters in a color space — plotColorClusters","text":"Plots color clusters 3D color space.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot color clusters in a color space — plotColorClusters","text":"","code":"plotColorClusters(   centers,   sizes,   scaling = 10,   plus = 0,   color_space = \"sRGB\",   phi = 35,   theta = 60,   alpha = 0.5,   ... )"},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot color clusters in a color space — plotColorClusters","text":"centers matrix color centers, rows centers columns channels. interpreted coordinates. sizes vector color sizes. Can relative absolute; going scaled plotting. scaling Factor scaling cluster sizes. clusters way big small plot, tinker . plus Value add scaled cluster size; can helpful seeing small empty bins swamped larger clusters. color_space color space centers. Important setting axis ranges converting colors hex codes plotting. function assumes centers argument already color space. phi, theta Viewing angles (degrees). alpha Transparency (0-1 range). ... parameters passed plot3D::scatter3D.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot color clusters in a color space — plotColorClusters","text":"Nothing; plots 3D scatterplot color clusters, corresponding colors sizes.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot color clusters in a color space — plotColorClusters","text":"function little behalf (e.g. labeling axes, setting axis ranges, trying find nice scaling parameters, etc). can pass parameters using ... function plot3D::scatter3D, probably good idea.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot color clusters in a color space — plotColorClusters","text":"","code":"corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") init_fit <- recolorize(corbetti,                        color_space = \"Lab\",                        method = \"k\",                        n = 30)   # we still have to convert to Lab color space first, since the centers are always RGB: centers <- grDevices::convertColor(init_fit$centers, \"sRGB\", \"Lab\") plotColorClusters(centers, init_fit$sizes,                   scaling = 25,                   color_space = \"Lab\",                   xlab = \"Luminance\",                   ylab = \"a (red-green)\",                   zlab = \"b (blue-yellow)\",                   cex.lab = 0.5) #> Warning: no DISPLAY variable so Tk is not available"},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a color palette — plotColorPalette","title":"Plot a color palette — plotColorPalette","text":"Plots color palette single bar, optionally scaling color vector sizes.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a color palette — plotColorPalette","text":"","code":"plotColorPalette(centers, sizes = NULL, cex_text = 2, horiz = TRUE, ...)"},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a color palette — plotColorPalette","text":"centers Colors plot palette. Accepts either character vector hex codes n x 3 matrix (rows = colors, columns = channels). Assumes RGB 0-1 range. sizes optional numeric vector sizes scaling color. sizes provided, colors plotted equal proportions. cex_text Size numbers displayed color, relative default. Passed graphics::barplot(). Text plotted sizes = NULL. cex_text = 0 remove numbering. horiz Logical. palette plotted vertically horizontally? ... Additional parameters passed graphics::barplot().","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a color palette — plotColorPalette","text":"return value; plots rectangular color palette.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a color palette — plotColorPalette","text":"plotColorPalette reorder convert colors color spaces, users working colorspaces convert RGB plotting.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotColorPalette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a color palette — plotColorPalette","text":"","code":"# plot 10 random colors rand_colors <- matrix(runif(30), ncol = 3) plotColorPalette(rand_colors)   # plot 10 random colors with arbitrary sizes sizes <- runif(10, max = 1000) plotColorPalette(rand_colors, sizes = sizes)   # reorder to plot smallest to largest size_order <- order(sizes) plotColorPalette(rand_colors[size_order, ],                  sizes[size_order])   # plot a vector of hex colors, turn off numbering hex_colors <- rgb(rand_colors) plotColorPalette(hex_colors, cex_text = 0)"},{"path":"https://hiweller.github.io/recolorize/reference/plotImageArray.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a 3D array as an RGB image — plotImageArray","title":"Plot a 3D array as an RGB image — plotImageArray","text":"says tin. extremely simple wrapper graphics::rasterImage(), maintains aspect ratio, removes axes, reduces margins cleaner plotting.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotImageArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a 3D array as an RGB image — plotImageArray","text":"","code":"plotImageArray(rgb_array, main = \"\", ...)"},{"path":"https://hiweller.github.io/recolorize/reference/plotImageArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a 3D array as an RGB image — plotImageArray","text":"rgb_array 3D array RGB values. Preferably output png::readPNG(), jpeg::readJPEG(), recoloredImage, constructImage, raster_to_array. main Optional title plot. ... Parameters passed graphics::plot.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotImageArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a 3D array as an RGB image — plotImageArray","text":"return value; plots image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/plotImageArray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a 3D array as an RGB image — plotImageArray","text":"","code":"# make a 100x100 image of random colors random_colors <- array(runif(100 * 100 * 3),                        dim = c(100, 100, 3)) recolorize::plotImageArray(random_colors)   # we can also plot...a real image corbetti <- system.file(\"extdata/corbetti.png\",                        package = \"recolorize\") img <- png::readPNG(corbetti) plotImageArray(img)"},{"path":"https://hiweller.github.io/recolorize/reference/raster_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from a (small-r) raster object to an RGB array — raster_to_array","title":"Convert from a (small-r) raster object to an RGB array — raster_to_array","text":"Recreates original numeric array raster object created grDevices::.raster. confused Raster* classes used raster package.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/raster_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from a (small-r) raster object to an RGB array — raster_to_array","text":"","code":"raster_to_array(raster_obj, alpha = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/raster_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from a (small-r) raster object to an RGB array — raster_to_array","text":"raster_obj matrix hex codes output grDevices::.raster. alpha Logical. alpha channel, retain array?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/raster_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from a (small-r) raster object to an RGB array — raster_to_array","text":"numeric RGB array (0-1 range).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/readImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in an image as a 3D array — readImage","title":"Read in an image as a 3D array — readImage","text":"Reads processes image 3D array. Extremely simple wrapper imager::load.image(), strips depth channel (resulting 3D, 4D, array). probably change.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/readImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in an image as a 3D array — readImage","text":"","code":"readImage(img_path, resize = NULL, rotate = NULL)"},{"path":"https://hiweller.github.io/recolorize/reference/readImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in an image as a 3D array — readImage","text":"img_path Path image (string). resize Fraction reduce image size. Important speed. rotate Number degrees rotate image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/readImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in an image as a 3D array — readImage","text":"3D RGB array (pixel rows x pixel columns x color channels). RGB channels scaled 0-1, 0-255.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/readImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in an image as a 3D array — readImage","text":"","code":"corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") img <- readImage(corbetti) plotImageArray(img)"},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Recluster color centers based on color similarity — recluster","title":"Recluster color centers based on color similarity — recluster","text":"Color mapping (k-means binning) often requires -clustering order recover details image. can result larger areas relatively uniform color split multiple colors, regions greater variation (due lighting, shape, reflection, etc) split multiple colors. function clusters color centers visual similarity (CIE Lab space), returns re-clustered object. Users can either set similarity cutoff final number colors. See examples.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recluster color centers based on color similarity — recluster","text":"","code":"recluster(   recolorize_obj,   dist_method = \"euclidean\",   hclust_method = \"complete\",   channels = 1:3,   color_space = \"Lab\",   ref_white = \"D65\",   cutoff = 60,   n_final = NULL,   plot_hclust = TRUE,   refit_method = c(\"imposeColors\", \"mergeLayers\"),   resid = FALSE,   plot_final = TRUE,   color_space_fit = \"sRGB\" )"},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recluster color centers based on color similarity — recluster","text":"recolorize_obj recolorize object recolorize(), recluster(), imposeColors(). dist_method Method passed stats::dist calculating distances colors. One \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" \"minkowski\". hclust_method Method passed stats::hclust clustering colors similarity. One \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). channels Numeric: color channels use clustering. Probably combination 1, 2, 3, e.g., consider luminance blue-yellow (b-channel) distance CIE Lab space, channels = c(1, 3) (L b). color_space Color space cluster centers, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. cutoff Numeric similarity cutoff grouping color centers together. range value depend chosen color space (see ), default absolute Euclidean distance CIE Lab space, means greater 0-100, cutoff values 20 80 usually work best. See details. n_final Final number desired colors; alternative specifying similarity cutoff. Overrides cutoff provided. plot_hclust Logical. Plot hierarchical clustering tree color similarity? Helpful troubleshooting cutoff. refit_method Method refitting image new color centers. One either \"imposeColors\" \"mergeLayers\". imposeColors() refits original image using new colors (slow often better results). mergeLayers() merges layers existing recolored image. faster since require new fit, can produce messier results. resid Logical. Get final color fit residuals colorResiduals()? plot_final Logical. Plot final color fit? color_space_fit Passed imposeColors(). color space image reclustered ?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recluster color centers based on color similarity — recluster","text":"recolorize object re-fit color centers.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recluster color centers based on color similarity — recluster","text":"function fairly straightforward: RGB color centers recolorize object converted CIE Lab color space (approximately perceptually uniform human vision), clustered using stats::hclust(), grouped using stats::cutree(). resulting groups passed assigned color centers imposeColors(), re-fits original image using new centers. similarity cutoff require user specify final number colors, unlike k-means n_final, meaning cutoff used multiple images (different numbers colors) produce relatively good fits. cutoff absolute Euclidean distance CIE Lab space sRGB colors, possible range distances (therefore cutoffs) 0 >200. higher cutoff, dissimilar colors grouped together. universally recommended cutoff; degree color variation due lighting one image might biologically relevant another.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recluster color centers based on color similarity — recluster","text":"","code":"# get an image corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # too many color centers recolored_corbetti <- recolorize(corbetti, bins = 2) #>  #> Using 2^3 = 8 total bins   # just enough! # check previous plot for clustering cutoff recluster_obj <- recluster(recolored_corbetti,                            cutoff = 45,                            plot_hclust = TRUE,                            refit_method = \"impose\")    # we get the same result by specifying n_final = 5 recluster_obj <- recluster(recolored_corbetti,                            n_final = 5,                            plot_hclust = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/recoloredImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recolored image from a recolorize object — recoloredImage","title":"Get recolored image from a recolorize object — recoloredImage","text":"recolorize objects use numeric color map matrix color centers make recolored images, since lighter weight flexible format. function generates colored image values plotting.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recoloredImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recolored image from a recolorize object — recoloredImage","text":"","code":"recoloredImage(recolorize_obj, type = c(\"array\", \"raster\"))"},{"path":"https://hiweller.github.io/recolorize/reference/recoloredImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recolored image from a recolorize object — recoloredImage","text":"recolorize_obj object class recolorize. Must include pixel assignment matrix matrix color centers. type Type image return. One either \"array\" \"raster\". Arrays numeric RGB arrays (larger, easier operations ), rasters matrices hex codes (smaller, really good plotting).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recoloredImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recolored image from a recolorize object — recoloredImage","text":"numeric image array (type = array) matrix hex codes ( type = raster).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize-package.html","id":null,"dir":"Reference","previous_headings":"","what":"recolorize: Color-Based Image Segmentation — recolorize-package","title":"recolorize: Color-Based Image Segmentation — recolorize-package","text":"Automatic, semi-automatic, manual functions generating color maps images. idea simplify colors image according metric useful user, using deterministic methods whenever possible. Many images clustered well using ---box functions, package also includes toolbox functions making manual adjustments (layer merging/isolation, blurring, fitting provided color clusters another image, etc). Also includes export methods color/pattern analysis packages (pavo, patternize, colordistance).","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/recolorize-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"recolorize: Color-Based Image Segmentation — recolorize-package","text":"Maintainer: Hannah Weller hannahiweller@gmail.com (ORCID)","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify the colors of an image — recolorize","title":"Simplify the colors of an image — recolorize","text":"Clusters colors RGB image according specified method, recolors image simplified color scheme.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify the colors of an image — recolorize","text":"","code":"recolorize(   img,   method = c(\"histogram\", \"kmeans\"),   bins = 2,   n = 5,   color_space = \"sRGB\",   ref_white = \"D65\",   lower = NULL,   upper = NULL,   transparent = TRUE,   resid = FALSE,   resize = NULL,   rotate = NULL,   plotting = TRUE,   horiz = TRUE,   cex_text = 1.5,   scale_palette = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify the colors of an image — recolorize","text":"img Path image (character vector) 3D image array read png::readPNG() {readImage}. method Method clustering image colors. One either histogram kmeans. See details. bins method = \"histogram\", either number bins per color channel (single number provided) vector length 3 number bins channel. n method = \"kmeans\", number color clusters fit. color_space Color space minimize distances, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\". Default \"Lab\", perceptually uniform (humans) color space. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. lower, upper RGB triplet ranges setting bounding box pixels mask. See details. transparent Logical. Treat transparent pixels background? Requires alpha channel (PNG). resid Logical. Return list different residual metrics describe goodness fit? resize value 0 1 resizing image (ex. resize = 0.5 reduce image size 50%). Recommended large images can speed analysis considerably. See details. rotate Degrees rotate image clockwise. plotting Logical. Plot recolored image & color palette? horiz Logical plotting. Plot output image color palette side side (TRUE) stacked vertically (FALSE)? cex_text plotting = TRUE scale_palette = FALSE, size text display color palette numbers. scale_palette Logical. plotting, plot colors color palette proportional size cluster?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify the colors of an image — recolorize","text":"object S3 class recolorize following attributes: original_img: original image, raster array. centers: matrix color centers RGB (0-1 range). sizes: number pixels assigned color cluster. pixel_assignments: matrix color center assignments pixel. call: call(s) used generate recolorize object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify the colors of an image — recolorize","text":"Method color clustering: stats::kmeans() clustering tries find set n clusters minimize overall distances. Histogram binning divides color space according set breaks; example, bins = 2 divide red, green, blue channels 2 bins (> 0.5 < 0 .5), resulting 8 possible ranges. white pixel (RGB = 1, 1, 1) fall R > 0.5, G > 0.5, B > 0.5 bin. resulting centers represent average color pixels assigned bin. K-means clustering can produce intuitive results, iterative, find slightly different clusters time run, order arbitrary. also tends divide similar colors make majority image. Histogram binning produce results every time, order, forces bins dispersed throughout color space, tends better pick small color details. Bins also comparable across images. However, sometimes means returning empty bins (.e. white bin empty clustering dark image). Background masking: lower, upper, transparent background masking conditions. Transparency unambiguous tends produce cleaner results, lower upper bounds can used instead treat pixels specific color range background. example, ignore white pixels (RGB = 1, 1, 1), might want mask pixels whose R, G, B values exceed 0.9. case, lower = c(0.9, 0.9, 0.9) upper = c(1, 1, 1). Regardless input background, recolored images returned transparent backgrounds adding alpha channel one already exist. Resizing: speed benefits downsizing images fairly obvious (fewer pixels = fewer operations). recoloring images simplifies detail anyways, downsizing prior recoloring run high risk losing important information. general guideline resizing distinguishable features interest still take least 2 pixels (preferably margin error) resized image.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify the colors of an image — recolorize","text":"","code":"# filepath to image img <- system.file(\"extdata/chongi.png\", package = \"recolorize\")  # default: histogram, 2 bins/channel rc <- recolorize(img) #>  #> Using 2^3 = 8 total bins   # we can also have different numbers of bins per channel rc <- recolorize(img, bins = c(4, 1, 1)) # mostly red #>  #> Using 4*1*1 = 4 bins  rc <- recolorize(img, bins = c(1, 4, 1)) # mostly green #>  #> Using 1*4*1 = 4 bins  rc <- recolorize(img, bins = c(1, 1, 4)) # mostly blue #>  #> Using 1*1*4 = 4 bins   # kmeans can produce a better fit with fewer colors rc <- recolorize(img, method = \"kmeans\", n = 8)   # increasing numbers of kmean colors recolored_images <- setNames(vector(\"list\", length = 10), c(1:10)) for (i in 1:10) {   kmeans_recolor <- recolorize(img, method = \"kmeans\",                                n = i) }            # kmeans, 10 colors kmeans_recolor <- recolorize(img, method = \"kmeans\",                              n = 8, plotting = FALSE) hist_recolor <- recolorize(img, method = \"hist\",                            bins = 2, plotting = FALSE) #>  #> Using 2^3 = 8 total bins # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # compare binning vs. kmeans clustering layout(matrix(c(1, 2, 3), ncol = 3)) plot(kmeans_recolor$original_img); title(\"original\") plot(recoloredImage(kmeans_recolor, type = \"raster\")); title(\"kmeans\") plot(recoloredImage(hist_recolor, type = \"raster\")); title(\"binning\")   graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize2.html","id":null,"dir":"Reference","previous_headings":"","what":"Recolorize with automatic thresholding — recolorize2","title":"Recolorize with automatic thresholding — recolorize2","text":"Calls recolorize recluster sequence, since often effective combination.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recolorize with automatic thresholding — recolorize2","text":"","code":"recolorize2(   img,   method = \"histogram\",   bins = 2,   n = 5,   cutoff = 20,   channels = 1:3,   n_final = NULL,   color_space = \"sRGB\",   recluster_color_space = \"Lab\",   refit_method = \"impose\",   ref_white = \"D65\",   lower = NULL,   upper = NULL,   transparent = TRUE,   resize = NULL,   rotate = NULL,   plotting = TRUE )"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recolorize with automatic thresholding — recolorize2","text":"img Path image (character vector) 3D image array read png::readPNG() {readImage}. method Method clustering image colors. One either histogram kmeans. See details. bins method = \"histogram\", either number bins per color channel (single number provided) vector length 3 number bins channel. n method = \"kmeans\", number color clusters fit. cutoff Numeric similarity cutoff grouping color centers together. range absolute Euclidean distance. CIE Lab space, greater 0-100, cutoff values 20 80 usually work best. RGB space, range 0-sqrt(3). See recluster details. channels Numeric: color channels use clustering. Probably combination 1, 2, 3, e.g., consider luminance blue-yellow (b-channel) distance CIE Lab space, channels = c(1, 3 (L b). n_final Final number desired colors; alternative specifying similarity cutoff. Overrides similarity_cutoff provided. color_space Color space minimize distances, passed [grDevices]{convertColor}. One \"sRGB\", \"Lab\", \"Luv\". Default \"sRGB\". recluster_color_space Color space group colors reclustering. Default CIE Lab. refit_method Method refitting image new color centers. One either \"impose\" \"merge\". imposeColors() refits original image using new colors (slow often better results). mergeLayers() merges layers existing recolored image. faster since require new fit, can produce messier results. ref_white Reference white converting different color spaces. D65 (default) corresponds standard daylight. lower, upper RGB triplet ranges setting bounding box pixels mask. See details. transparent Logical. Treat transparent pixels background? Requires alpha channel (PNG). resize value 0 1 resizing image (ex. resize = 0.5 reduce image size 50%). Recommended large images can speed analysis considerably. See details. rotate Degrees rotate image clockwise. plotting Logical. Plot final results?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recolorize with automatic thresholding — recolorize2","text":"object S3 class recolorize following attributes: original_img: original image, raster array. centers: matrix color centers RGB (0-1 range). sizes: number pixels assigned color cluster. pixel_assignments: matrix color center assignments pixel. call: call(s) used generate recolorize object.","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/recolorize2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recolorize with automatic thresholding — recolorize2","text":"","code":"# get image path img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\")  # fit recolorize: rc <- recolorize2(img, bins = 2, cutoff = 45) #>  #> Using 2^3 = 8 total bins"},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a recolorize object to a vector — recolorizeVector","title":"Convert a recolorize object to a vector — recolorizeVector","text":"Converts recolorize color map set polygons, can plotted scale without losing quality (opposed pixel-based bitmap format). Requires raster, rgeos, sp packages installed. Useful creating nice visualizations; slow large images. recommended fit recolorize object reducing original image first, rather resize argument , reduces color map (mixed results).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a recolorize object to a vector — recolorizeVector","text":"","code":"recolorizeVector(   recolorize_obj,   size_filter = 0.1,   smoothness = 1,   base_color = \"default\",   plotting = FALSE,   resize = 1,   ... )"},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a recolorize object to a vector — recolorizeVector","text":"recolorize_obj object class recolorize, generated recolorize, recolorize2, imposeColors, wernerColor. size_filter size (proportion shortest dimension image) color patch elements absorb vectorizing. Small details (e.g. stray pixels) tend look strange vectorizing, removing beforehand can improve results. smoothness Passed smoothr::smooth using \"ksmooth\" method smoothing jagged lines result converting pixel coordinates polygon vertices. Higher values = smoothing. base_color color use fill gaps can result smoothing. base_color = \"default\", defaults darkest color palette. Otherwise, numeric index one colors recolorize_obj$centers use. plotting Logical. Plot results computing? resize Proportion resize color map turning polygon, e.g. resize = 0.5 reduce color map size 50%. Speeds function, almost always get better results resizing initial image fitting recolorize object. ... Plotting parameters, passed graphics::plot.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a recolorize object to a vector — recolorizeVector","text":"vector_recolorize object, list following elements: base_layer: base polygon, essentially image silhouette. layers: list sp::SpatialPolygonsDataFrame polygons, one per color patch. layer_colors: colors (hex codes) polygon. base_color: color (hex code) base polygon. asp: original image aspect ratio, important plotting.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a recolorize object to a vector — recolorizeVector","text":"Although vector objects typically smaller recolorize objects, need specify XY coordinates perimeters polygon, can still fairly large (take long time calculate). Users can try things speed : using lower smoothness values; setting plotting = FALSE; resizing image (preferably fitting initial recolorize object); reducing complexity color patches using absorbLayer editLayer (e.g. absorbing components < 10 pixels size). Still, expect function take several minutes even moderately sized images--takes 7-10 seconds ~200x100 pixel images examples! function finishes running, however, plotting quite fast, objects smaller  recolorize objects.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorizeVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a recolorize object to a vector — recolorizeVector","text":"","code":"# \\donttest{ img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") rc <- recolorize2(img, cutoff = 45) #>  #> Using 2^3 = 8 total bins    # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # takes ~10 seconds as_vector <- recolorizeVector(rc, smoothness = 5,                               size_filter = 0.05) #> Loading required namespace: rgeos  # to save as an SVG with a transparent background and # no margins (e.g. for an illustration figure): grDevices::svg(\"recolorize_vector.svg\", height = 4, width = 2, bg = \"transparent\") par(mar = rep(0, 4)) plot(as_vector) dev.off() #> agg_png  #>       2   # and to avoid spamming your working directory, run this line to remove # the file we just wrote: file.remove(\"recolorize_vector.svg\") #> [1] TRUE  graphics::par(current_par) # }"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"Run adjacency (Endler 2012) boundary strength (Endler et al. 2018) analysis directly recolorize object, assuming human viewer (.e. using CIE Lab HSL color distances correspond perceptual distances human vision). achieved converting recolorize object pavo::classify object, converting colors HSL space, calculating pavo::coldist object CIE Lab color space running pavo::adjacent.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"","code":"recolorize_adjacency(   recolorize_obj,   xscale = 1,   coldist = \"default\",   hsl = \"default\",   ... )"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"recolorize_obj recolorize object. xscale length x-axis, preferred units. Passed pavo::adjacent. coldist pavo::coldist object; otherwise, argument ignored coldist object human vision calculated RGB colors converted CIE Lab using cielab_coldist. hsl dataframe patch, hue, sat lum columns specifying HSL values color patch, passed pavo::adjacent. Otherwise, argument ignored HSL values calculated human vision RGB colors recolorize object. ... arguments passed pavo::adjacent.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"results pavo::adjacent; see documentation meaning specific value.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"Eventually, plan incorporate sophisticated color models using human perceptual color distances, .e. allowing users match color patches spectra. However, return reasonable informative results long human vision appropriate assumption image data.","code":""},{"path":[]},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run pavo's adjacency and boundary strength analysis on a recolorize\nobject — recolorize_adjacency","text":"","code":"img <- system.file(\"extdata/chongi.png\", package = \"recolorize\") recolorize_obj <- recolorize(img, method = \"k\", n = 2)  recolorize_adjacency(recolorize_obj) #> Using single set of coldists for all images. #> Using single set of hsl values for all images. #>  k     N n_off       p_1       p_2       p_3     q_1_1    q_1_2     q_2_2 #>  3 40364  1340 0.5150934 0.3561947 0.1287119 0.5041869 0.011099 0.3439451 #>        q_1_3      q_2_3     q_3_3     t_1_2      t_1_3     t_2_3        m #>  0.003121593 0.01897731 0.1186701 0.3343284 0.09402985 0.5716418 2.964602 #>      m_r      m_c        A       Sc       St        Jc        Jt         B #>  3.50885 2.420354 1.449726 2.446408 2.235179 0.8154692 0.7450598 0.3134328 #>         Rt Rab     m_dS     s_dS    cv_dS     m_dL     s_dL     cv_dL     m_hue #>  0.4473914   1 31.90773 17.47305 0.547612 62.60339 23.13469 0.3695437 0.5307585 #>     s_hue   var_hue     m_sat     s_sat   cv_sat     m_lum     s_lum    cv_lum #>  1.605562 0.7244305 0.2508135 0.3565633 1.421627 0.6910565 0.4721701 0.6832583"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a recolorize object to a raster object — recolorize_to_patternize","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"Convert recolorize object list RasterLayer objects, format required patternize package. Note downstream patternize functions require lists RasterLayer objects mostly require lists lists, probably need use function list recolorize objects.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"","code":"recolorize_to_patternize(recolorize_obj, return_background = FALSE)"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"recolorize_obj recolorize object. return_background Logical.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"list RasterLayer objects, one per color class.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"Note function retain colors layers -- able convert back recolorize object object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_patternize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a recolorize object to a raster object — recolorize_to_patternize","text":"","code":"# \\donttest{ # fit recolorize object: img <- system.file(\"extdata/ephippigera.png\", package = \"recolorize\") rc <- recolorize2(img) #>  #> Using 2^3 = 8 total bins    # takes ~10 sec to run: # convert to a raster list: as_raster_list <- recolorize_to_patternize(rc) # }"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a recolored image as a PNG — recolorize_to_png","title":"Save a recolored image as a PNG — recolorize_to_png","text":"Saves recolored image recolorize object PNG. done calling recoloredImage png::writePNG.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a recolored image as a PNG — recolorize_to_png","text":"","code":"recolorize_to_png(recolorize_obj, filename = \"\")"},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a recolored image as a PNG — recolorize_to_png","text":"recolorize_obj recolorize object. filename Filename saving PNG.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a recolored image as a PNG — recolorize_to_png","text":"return value; saves PNG file specified location.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a recolored image as a PNG — recolorize_to_png","text":"function saves png dimensions (pixels) image originally provided recolorize (meaning resized original image, resulting PNG also smaller). Anything complicated can created custom scripts: example, create vector image using recolorizeVector, save PNG resolution/size.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/recolorize_to_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a recolored image as a PNG — recolorize_to_png","text":"","code":"# \\donttest{ img <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") rc <- recolorize2(img, cutoff = 45) #>  #> Using 2^3 = 8 total bins    # save a PNG: recolorize_to_png(rc, \"corbetti_recolored.png\")  # remove the PNG (so this example doesn't spam your working directory) file.remove(\"corbetti_recolored.png\") #> [1] TRUE # }"},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"Evaluates series calls 'call' element recolorize object, either original image (default) another image. almost always easier (better practice) define new function calls series recolorize function order use function!","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"","code":"rerun_recolorize(recolorize_obj, img = \"original\")"},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"recolorize_obj object S3 class 'recolorize'. img image call recolorize functions. left \"original\" (default), functions called original image stored recolorize object. Otherwise can object taken img argument recolorize functions (path image image array).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"recolorize object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"function utilizes eval statements evaluate calls stored call element specified recolorize object. makes potentially unpredictable simply defining function, preferable.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rerun_recolorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rerun the sequence of calls used to produce a recolorize object — rerun_recolorize","text":"","code":"# list images corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") chongi <- system.file(\"extdata/chongi.png\", package = \"recolorize\")  # fit a recolorize object by running two functions in a row: rc <- recolorize(corbetti, bins = 2, plotting = FALSE) #>  #> Using 2^3 = 8 total bins rc <- recluster(rc, cutoff = 45)    # check out the call structure (a list of commands that were run): rc$call #> [[1]] #> recolorize(img = corbetti, bins = 2, plotting = FALSE) #>  #> [[2]] #> recluster(recolorize_obj = rc, cutoff = 45) #>   # we can rerun the analysis on the same image (bit pointless): rerun <- rerun_recolorize(rc) #>  #> Using 2^3 = 8 total bins    # or, we can rerun it on a new image: rerun_chongi <- rerun_recolorize(rc, img = chongi) #>  #> Using 2^3 = 8 total bins"},{"path":"https://hiweller.github.io/recolorize/reference/rgb2hsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RGB colors to HSL — rgb2hsl","title":"Convert RGB colors to HSL — rgb2hsl","text":"Convert RGB colors (0-1 range) HSL (hue-saturation-luminance) space. Used passing RGB colors pavo::adjacent.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rgb2hsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RGB colors to HSL — rgb2hsl","text":"","code":"rgb2hsl(rgb_matrix, radians = TRUE, pavo_hsl = TRUE)"},{"path":"https://hiweller.github.io/recolorize/reference/rgb2hsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RGB colors to HSL — rgb2hsl","text":"rgb_matrix RGB colors nx3 matrix (rows = colors, columns = channels). radians Logical. Return HSL colors units radians (TRUE) degrees (FALSE)? pavo_hsl Logical. Return HSL matrix format can passed directly pavo::adjacent hsl parameter?","code":""},{"path":"https://hiweller.github.io/recolorize/reference/rgb2hsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RGB colors to HSL — rgb2hsl","text":"dataframe patch, hue, sat, lum columns one row per color (pavo_hsl = TRUE) matrix HSL coordinates (pavo_hsl = FALSE).","code":""},{"path":"https://hiweller.github.io/recolorize/reference/splitByColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Split color clusters in a recolorize object into layers — splitByColor","title":"Split color clusters in a recolorize object into layers — splitByColor","text":"Separates color clusters recolorize(), recluster(), imposeColors() object binary masks.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/splitByColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split color clusters in a recolorize object into layers — splitByColor","text":"","code":"splitByColor(   recolorize_obj,   layers = \"all\",   plot_method = c(\"overlay\", \"binary\", \"colormask\", \"none\") )"},{"path":"https://hiweller.github.io/recolorize/reference/splitByColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split color clusters in a recolorize object into layers — splitByColor","text":"recolorize_obj recolorize object recolorize(), recluster(), imposeColors(). layers Either \"\" numeric vector color centers return. plot_method Plotting method plotting color layers. Options \"overlay\", \"binary\", \"colormask\", \"none\".","code":""},{"path":"https://hiweller.github.io/recolorize/reference/splitByColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split color clusters in a recolorize object into layers — splitByColor","text":"list binary matrices (1/white = color presence, 0/black = color absence), one per color center.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/splitByColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split color clusters in a recolorize object into layers — splitByColor","text":"","code":"# get original fit corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") recolored_corbetti <- recolorize::recolorize(corbetti, plotting = TRUE) #>  #> Using 2^3 = 8 total bins   # to reset graphical parameters: current_par <- graphics::par(no.readonly = TRUE)  # make a layout layout(matrix(c(1, 1:9), nrow = 2)) par(mar = c(0, 0, 2, 0)) # plot original plotImageArray(recolored_corbetti$original_img)  # plot layers corbetti_layers <- splitByColor(recolored_corbetti, plot_method = \"over\")   # plot binary maps plotImageArray(recolored_corbetti$original_img) for (i in 1:length(corbetti_layers)) {   plotImageArray(corbetti_layers[[i]]) }   graphics::par(current_par)"},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop minor colors from a recolorize object — thresholdRecolor","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"Drops color patches whose cumulative sum (proportion total pixels assigned) equal less pct, dominant color patches remain, refits object reduced set color centers Useful dropping spurious detail colors.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"","code":"thresholdRecolor(recolorize_obj, pct = 0.05, plotting = TRUE, ...)"},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"recolorize_obj object class recolorize. pct proportion cutoff (0-1) dropping color patches. higher value , /larger color centers dropped. plotting Logical. Plot results? ... arguments passed imposeColors, called refitting new recolorize object reduced set clusters.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"recolorize object.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"function fairly simple execution: color centers arranged sizes, largest smallest, cumulative sum calculated. minimum number color centers reach cumulative sum equal greater cutoff (1 - pct) retained, dominant colors used re-fit image. Despite straightforward, can surprisingly useful function.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/thresholdRecolor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop minor colors from a recolorize object — thresholdRecolor","text":"","code":"img <- system.file(\"extdata/fulgidissima.png\", package = \"recolorize\") init_fit <- recolorize(img, bins = 3) #>  #> Using 3^3 = 27 total bins  thresh_fit <- thresholdRecolor(init_fit, pct = 0.1)   # if you take it too far, you just get one color back: thresh_fit_oops <- thresholdRecolor(init_fit, pct = 1)"},{"path":"https://hiweller.github.io/recolorize/reference/werner.html","id":null,"dir":"Reference","previous_headings":"","what":"Werner's nomenclature of colors — werner","title":"Werner's nomenclature of colors — werner","text":"table 110 colors described \"Werner's Nomenclature Colors\", 1821 color reference Patrick Syme (building work Abraham Gottlob Werner), notably used Charles Darwin. Colors represent average pixel color scanned swatch.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/werner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Werner's nomenclature of colors — werner","text":"","code":"werner"},{"path":"https://hiweller.github.io/recolorize/reference/werner.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Werner's nomenclature of colors — werner","text":"data frame 110 rows 13 variables: index color index. family broad color category (white, red, etc). name original color name. hex Color hex code.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/werner.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Werner's nomenclature of colors — werner","text":"https://www.c82.net/werner/#colors","code":""},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap an image to Werner's nomenclature — wernerColor","title":"Remap an image to Werner's nomenclature — wernerColor","text":"Remaps recolorize object colors Werner's Nomenclature Colors Patrick Syme (1821), one first attempts objective color reference western science, notably used Charles Darwin.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap an image to Werner's nomenclature — wernerColor","text":"","code":"wernerColor(   recolorize_obj,   which_img = c(\"original\", \"recolored\"),   n_colors = 5 )"},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remap an image to Werner's nomenclature — wernerColor","text":"recolorize_obj recolorize object returned recolorize(), recluster(), imposeColors(). which_img image recolor; one either \"original\" \"recolored\". n_colors Number colors list plotting, order size. Ex: n_colors = 5 plot 5 largest colors names. colors returned normal recolorize object regardless n_colors; affects plot.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap an image to Werner's nomenclature — wernerColor","text":"recolorize object additional list element, werner_names, listing Werner color names center.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remap an image to Werner's nomenclature — wernerColor","text":"See https://www.c82.net/werner/ check original colors.","code":""},{"path":"https://hiweller.github.io/recolorize/reference/wernerColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remap an image to Werner's nomenclature — wernerColor","text":"","code":"# get an initial fit: corbetti <- system.file(\"extdata/corbetti.png\", package = \"recolorize\") recolored_corbetti <- recolorize(corbetti, plotting = FALSE) #>  #> Using 2^3 = 8 total bins  # recolor original image corbetti_werner <- wernerColor(recolored_corbetti,                                which_img = \"original\",                                n_colors = 6)   # we can simplify the colors and then do it again: corbetti_recluster <- recluster(recolored_corbetti,                                 cutoff = 45,                                 plot_hclust = FALSE)  corbetti_werner <- wernerColor(corbetti_recluster,                                which_img = \"recolored\")"},{"path":"https://hiweller.github.io/recolorize/news/index.html","id":"recolorize-010","dir":"Changelog","previous_headings":"","what":"recolorize 0.1.0","title":"recolorize 0.1.0","text":"CRAN release: 2021-12-07 first release recolorize.","code":""}]
