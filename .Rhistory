function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
centers
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image)
d
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
pixel_assignments
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
# make a vector for sizes
sizes <- rep(0, prod(bins))
dim(d)
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
centers
dim(d)[1]
d
pixel_assignments
unique(pixel_assignments)
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
devtools::load_all(".")
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im2 <- system.file("extdata/corbetti.png", package = "recolorize")
rc1 <- recolorize(im1)
rc2 <- recolorize(im2)
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2))
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
?mgcv::uniquecombs
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
bins = 3
pm1 <- bg_indexed$non_bg
img <- readImage(im2)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
pm2 <- bg_indexed$non_bg
bins = 3
pm <- pm1
bins <- rep(bins, 3)
#sRGB/HSV range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
pm <- pm2
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
centers
possible_bins
j
j = 1
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
j
d[j, ]
possible_bins
paste0(d[j, ])
paste0(d[j, ], collapse = "")
match(paste0(d[j, ], collapse = ""), apply(possible_bins, j)
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, )
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = ""))
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
j = 27
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
d[j, ]
d
dim(d)
j = 25
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
# for matching
bin_names <- apply(possible_bins, 1,
\(x) paste0(x, collapse = ""))
# match to possible_bins bin
match(paste0(d[j, ], collapse = ""),
bin_names)
pixel_assignments_2 <- matrix(0,
nrow = nrow(pixel_assignments),
ncol = ncol(pixel_assignments))
nrow(pixel_assignments)
pixel_assignments
length(pixel_assignments)
dim(pixel_assignments)
pixel_assignments_2 <- rep(0, length(pixel_assignments))
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
library(colordistance)
cd1 <- getImageHist(im1)
cd2 <- getImageHist(im2)
cd1 <- getImageHist(im1, bin.avg = F)
cd2 <- getImageHist(im2, bin.avg = F)
cd1 <- getImageHist(im1, bins = 2, bin.avg = F)
cd2 <- getImageHist(im2, bins = 2, bin.avg = F)
,
roxygen2::roxygenize()
devtools::load_all(".")
img <- system.file("extdata/chongi.png", package = "recolorize")
rc <- recolorize(img)
rc <- recolorize(img, bin_avg = F)
rc$centers
pm
pixel_matrix <- matrix(runif(300), ncol = 3)
bins = 2
color_space = "sRGB"
bin_avg = FALSE
ref_white = "D65"
# make sure bins is either a number or a vector of length 3
stopifnot(length(bins) == 1 | 3)
# match argument for color space
color_space <- match.arg(color_space)
# first, convert to color space for clustering:
pm <- col2col(pixel_matrix,
from = "sRGB",
to = color_space,
ref_white = ref_white)
# format bins
if (length(bins) == 1) {
message(paste("\nUsing ", bins, "^3 = ", paste(bins^3),
" total bins", sep = ""))
bins <- rep(bins, 3)
} else {
message(paste("\nUsing ", bins[1], "*", bins[2],
"*", bins[3], " = ", bins[1] * bins[2] * bins[3],
" bins", sep = ""))
}
# color space ranges
if (color_space == "Lab") {
# Lab is 0-100 (L), -127-127 (a and b)
# HOWEVER, these extremes are virtually unoccupied by RGB colors
# these are a little outside the range of sRGB in Lab space:
brange <- list(c(0, 100),
c(-90, 100),
c(-110, 95))
}  else if (color_space == "Luv") {
# please don't ever ask me about this
brange <- list(c(0, 100),
c(-85, 175),
c(-135, 107))
} else {
#sRGB/HSV range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
}
brange
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
breaks
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
centers
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
pixel_assignments_2 <- rep(0, length(pixel_assignments))
# make a vector for sizes
sizes <- rep(0, prod(bins))
# for matching
bin_names <- apply(possible_bins, 1,
\(x) paste0(x, collapse = ""))
bin_names
j = 1
# match to possible_bins bin
bin_idx <- match(paste0(d[j, ], collapse = ""),
bin_names)
bin_idx
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
pix_temp
pixel_assignments_2[which(pixel_assignments == j)] <- bin_idx
devtools::load_all(".")
rc <- recolorize(img, bin_avg = F)
rc <- recolorize(img, bin_avg = F, bins = 3)
rc <- recolorize(img, bin_avg = T, bins = 3)
rc <- recolorize(img, bin_avg = F, bins = 3)
rc <- recolorize(img, bin_avg = F, bins = 3, color_space = "Lab")
img <- system.file("extdata/chongi.png", package = "recolorize")
rc_bin_avg <- recolorize(img, bins = 2)
rc_bin_avg <- recolorize(img, bins = 2, bin_avg = F)
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im2 <- system.file("extdata/corbetti.png", package = "recolorize")
devtools::load_all(".")
rc <- recolorize(im1)
rc <- recolorize(im1)
rc <- recolorize(im2)
plot(rc)
rc2 <- mergeLayers(rc, list(c(3, 4),
c(5, 7),
c(2, 5)))
rc2 <- mergeLayers(rc, list(c(3, 4),
c(5, 7),
c(2, 6)))
rc <- recolorize(im2, bins = 3)
plot(rc)
rc$zi
rc$sizes
rc2 <- mergeLayers(rc, list(c(1:6),
c(7:12)))
rc2 <- mergeLayers(rc, list(c(1:6),
c(7:12)), remove_empty_centers = F)
rc <- recolorize(im2, bins = c(2, 3, 3))
plot(rc)
rc$sizes
rc <- recolorize2(im2)
rc <- recolorize2(im2, cutoff = 45)
plot(rc)
rc$centers
rc$centers <- rbind(rc$centers, c(0, 0, 0))
rc$centers
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc <- recolorize2(im2)
plot(rc)
rc <- recolorize(im2)
plot(rc)
rc$centers <- rbind(rc$centers, c(0, 0, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2$centers
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
plot(rc, sizes = T)
# add an extra empty center (bright yellow)
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
# recolorize & plot
rc <- recolorize(im)
# get an image that comes with the package
im <- system.file("extdata/corbetti.png", package = "recolorize")
# recolorize & plot
rc <- recolorize(im)
plot(rc)
# add an extra empty center (bright yellow)
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
# plot with sizes = FALSE to see the empty center:
plot(rc, sizes = FALSE)
# vs. it does not appear when sizes = TRUE:
plot(rc, sizes = TRUE)
# use mergeLayers with remove_empty_centers = F
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = T)
# use mergeLayers with remove_empty_centers = F
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2$centers
# vs. if we set to TRUE:
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = T)
devtools::load_all(".")
img <- "~/Dropbox/color/help/fixed_ion_image_sum_all_1.tiff"
x <- readImage(img)
?readImage
x <- imager::load.image(img)
x
img_path <- img
# read in image
img_ext <- tolower(tools::file_ext(img_path))
if (img_ext %in% c("jpeg", "jpg", "png", "bmp", "tif", "tiff")) {
img <- imager::load.image(img_path)
} else {
stop("Image must be either JPG, PNG, TIFF, or BMP")
}
# drop depth channel
# i don't want to talk about this
# someday we'll do it all with cimg objects
temp <- array(dim = dim(img)[c(1:2, 4)])
temp
dim(temp)
temp <- img[ , , 1, ]
temp
dim(temp)
devtools::load_all(".")
img <- "~/Dropbox/color/help/fixed_ion_image_sum_all_1.tiff"
x <- readImage(img)
plot(x)
x
plotImageArray(x)
range(x)
x <- imager::load.image(img)
plot(x)
imager::load.image()
?imager::load.image()
?magick::image_read()
devtools::load_all(".")
x <- readImage(img)
plotImageArray(x)
install.packages("magick")
img <- system.file("extdata/chongi.png", package = "recolorize")
x <- readImage(img)
devtools::load_all(".")
devtools::load_all(".")
rc <- recolorize(img)
rc <- recolorize2(img)
rc <- recolorize2(img, cutoff = 40)
img <- dir(system.file("extdata/", package = "recolorize"))
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 40)
plot(rc)
rc_corrected <- recolorize::medianColors(rc)
rc <- recolorize2(img, cutoff = 50)
rc <- recolorize2(img, cutoff = 45)
rc_corrected <- recolorize::medianColors(rc)
rc <- recolorize2(img, cutoff = 40)
rc_corrected <- recolorize::medianColors(rc)
img <- "~/Dropbox/fish/arcturus.png"
rc <- recolorize2(img, cutoff = 40)
rc <- recolorize2(img, resize = 0.5, cutoff = 40)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
img <- "~/Dropbox/fish/arcturus.png"
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
devtools::load_all(".")
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
rc_corrected <- medianColors(rc)
?medianColors
img <- "~/Dropbox/color/demo/images/snakes/Oxyrhopus_melanogenys_solid.png"
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
img <- "~/Dropbox/color/demo/images/Pomacanthus_Pomacanthus imperator_-1184094044.jpg"
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
img <- "~/Dropbox/color/demo/images/Anampses_Anampses cuvier_272987147.jpg
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
rc_corrected <- medianColors(rc)
plot(rc)
img <- "~/Dropbox/color/demo/images/Anampses_Anampses cuvier_272987147.jpg
img <- "~/Dropbox/color/demo/images/Anampses_Anampses cuvier_272987147.jpg"
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
download.file("https://upload.wikimedia.org/wikipedia/commons/e/e0/Ishihara_9.png",
"ishihara.png")
img <- "ishihara.png"
rc <- recolorize2(img, resize = 0.15, cutoff = 40)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, cutoff = 40)
rc <- recolorize(img)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/4/45/Coccinellidae_in_Jyv%C3%A4skyl%C3%A4.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, cutoff = 40)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, cutoff = 50)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/1/1c/Ladybug_4.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, cutoff = 50)
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Ladybug_4.jpg/221px-Ladybug_4.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, cutoff = 50)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, cutoff = 30)
rc_corrected <- medianColors(rc)
rc <- recolorize(img)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, cutoff = 20)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Coccinellidae_%28Lulpany%29.JPG/640px-Coccinellidae_%28Lulpany%29.JPG,
""
"
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Coccinellidae_%28Lulpany%29.JPG/640px-Coccinellidae_%28Lulpany%29.JPG",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, cutoff = 20)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Coccinellidae_%28Explore%29_%2826955619093%29.jpg/640px-Coccinellidae_%28Explore%29_%2826955619093%29.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, cutoff = 20)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Coccinellidae_%28Lulpany%29.JPG/640px-Coccinellidae_%28Lulpany%29.JPG",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img,color_space = "Lab", cutoff = 20)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Ladybug_4.jpg/221px-Ladybug_4.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, color_space = "Lab", cutoff = 20)
rc_corrected <- medianColors(rc)
download.file("https://upload.wikimedia.org/wikipedia/commons/4/45/Coccinellidae_in_Jyv%C3%A4skyl%C3%A4.jpg",
"ladybug.png")
img <- "ladybug.png"
rc <- recolorize2(img, cutoff = 50)
rc <- recolorize2(img, color_space = "Lab", cutoff = 50)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, color_space = "HSV", cutoff = 50)
rc <- recolorize2(img, color_space = "Lab", cutoff = 30)
rc_corrected <- medianColors(rc)
rc <- recolorize2(img, color_space = "Lab", cutoff = 40)
rc_corrected <- medianColors(rc)
