# and return
return(r3)
devtools::load_all(".")
plotImageArray(r3)
# get non-background pixels (> 0) and set them to have alpha = 1
r_alpha <- raster::merge(r > 0 & !is.nan(r) & !is.na(r))
# adjust negative values
r[r < 0] <- 0
# add alpha layer
# divide r by 255 so it's in a 0-1 range
# idk what's going on but here's a weird failsafe:
r_range <- max(raster::maxValue(r)) - min(raster::minValue(r))
if (r_range > 255) {
r2 <- raster::addLayer(r / r_range, r_alpha)
} else {
r2 <- raster::addLayer(r / 255, r_alpha)
}
# convert to an array
r3 <- raster::as.array(r2)
r_nan <- raster::merge(is.nan(r))
plot(r_nan)
is.nan(r) <- 0
is.nan(r) <- 0
r[is.nan(r)] <-0
r_nan <- raster::merge(is.nan(r))
plot(r_nan)
devtools::load_all(".")
rasterlist <- readRDS("../help/erato_lativitta/fws_imageList_aligned.rds")
library(raster)
r <- rasterlist[[3]]
a <- brick_to_array(r)
plotImageArray(a)
a_list <- lapply(rasterlist, brick_to_array)
layout(matrix(1:10, nrow = 2))
lapply(a_list, plotImageArray)
plot(merge(is.nan(r)))
plot(merge(is.nan(r)))
lapply(rasterlist, \(x) any(is.nan(x)))
b <- lapply(rasterlist, \(x) any(is.nan(x)))
b
b[[1]]
plot(b)
plot(b[[1]])
plot(b[[3]])
b <- lapply(rasterlist, \(x) sum(is.nan(x)))
b
b <- lapply(rasterlist, \(x) plot(is.nan(x)))
layout(matrix(1:10, nrow = 2))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x))))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x)),
main = name(x)))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x)),
main = names(x)))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x)))
)
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x))))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x))))
layout(matrix(1:10, nrow = 2))
b <- lapply(rasterlist, \(x) plot(merge(is.nan(x))))
names(rasterlist)
r$layer.1
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
par(mar = c(4, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
layout(matrix(1:12, nrow = 3))
par(mar = c(4, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
par(mar = c(2, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
layout(matrix(1:12, nrow = 3))
par(mar = c(2, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
layout(matrix(1:10, nrow = 2))
par(mar = c(2, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
minValue(r)
r <- rasterlist[[3]]
minValue(r)
maxValue(r)
max(raster::maxValue(r))
min(raster::minValue(r))
a_list <- lapply(rasterlist, brick_to_array)
lapply(a_list, plotImageArray)
is.nan(NA)
is.na(NaN)
rasterlist <- readRDS("../help/erato_lativitta/fws_imageList_aligned.rds")
names(rasterlist)
layout(matrix(1:10, nrow = 2))
par(mar = c(2, 3, 3, 1))
b <- lapply(1:length(rasterlist), \(x) plot(merge(is.nan(rasterlist[[x]])),
main = names(rasterlist)[x]))
a <- brick_to_array(r)
a_list <- lapply(rasterlist, brick_to_array)
lapply(a_list, plotImageArray)
pkgdown::build_site()
devtools::load_all(".")
install.packages
install.packages("smoothr")
?recolorize2
# get image path
img <- system.file("extdata/corbetti.png", package = "recolorize")
# fit recolorize:
rc <- recolorize2(img, bins = 2, cutoff = 45)
recolorize_obj <- rc
size_filter = 0.1
size_filter <- min(round(dim(recolorize_obj$original_img) * size_filter))
for (i in 1:nrow(recolorize_obj$centers)) {
recolorize_obj <- absorbLayer(recolorize_obj, i,
function(s) s <= size_filter,
plotting = FALSE,
remove_empty_layers = FALSE)
}
# resize pixel assignments
im <- imager::as.cimg(recolorize_obj$pixel_assignments)
im <- round(imager::imresize(im, scale = resize,
interpolation = 3))
resize = 1
im <- round(imager::imresize(im, scale = resize,
interpolation = 3))
recolorize_obj$pixel_assignments <- cimg_to_array(im)
# get layers
layers <- splitByColor(recolorize_obj,
plot_method = "none")
base_color == "default"
base_color = "default"
# get base color - default to darkest color
if (base_color == "default") {
lab_cols <- col2col(recolorize_obj$centers, to = "Lab")
base_color <- which.min(lab_cols[ , 1])
}
# convert to hex
base_color <- ifelse(base_color <= nrow(recolorize_obj$centers),
yes = grDevices::rgb(recolorize_obj$centers)[base_color],
no = stop("`base_color` must be the numeric index of the layer to use
as the base color"))
# create base layer
base_layer <- recolorize_obj$pixel_assignments
base_layer[which(base_layer > 0)] <- 1
# get polygon
b <- raster::rasterToPolygons(raster::raster(base_layer),
fun = function(x) x > 0,
dissolve = TRUE)
?raster::rasterToPolygons
#' plot(as_vector)
#' dev.off()
#'
#' # and to avoid spamming your working directory, run this line to remove
#' # the file we just wrote:
#' file.remove("recolorize_vector.svg")
#'
#' graphics::par(current_par)
#' }
#' @export
recolorizeVector <- function(recolorize_obj,
size_filter = 0.1,
smoothness = 1,
base_color = "default",
plotting = FALSE,
resize = 1,
...) {
size_filter <- min(round(dim(recolorize_obj$original_img) * size_filter))
if (size_filter > 0) {
for (i in 1:nrow(recolorize_obj$centers)) {
recolorize_obj <- absorbLayer(recolorize_obj, i,
function(s) s <= size_filter,
plotting = FALSE,
remove_empty_layers = FALSE)
}
}
# resize pixel assignments
im <- imager::as.cimg(recolorize_obj$pixel_assignments)
im <- round(imager::imresize(im, scale = resize,
interpolation = 3))
recolorize_obj$pixel_assignments <- cimg_to_array(im)
# get layers
layers <- splitByColor(recolorize_obj,
plot_method = "none")
# get base color - default to darkest color
if (base_color == "default") {
lab_cols <- col2col(recolorize_obj$centers, to = "Lab")
base_color <- which.min(lab_cols[ , 1])
}
# convert to hex
base_color <- ifelse(base_color <= nrow(recolorize_obj$centers),
yes = grDevices::rgb(recolorize_obj$centers)[base_color],
no = stop("`base_color` must be the numeric index of the layer to use
as the base color"))
# create base layer
base_layer <- recolorize_obj$pixel_assignments
base_layer[which(base_layer > 0)] <- 1
# get polygon
b <- raster::rasterToPolygons(raster::raster(base_layer),
fun = function(x) x > 0,
dissolve = TRUE)
# smooth it
b <- smoothr::smooth(b, "ksmooth", smoothness = smoothness)
# initialize polygon list
p <- list(base_layer = b,
layers = vector("list", length(nrow(recolorize_obj$centers))),
layer_colors = grDevices::rgb(recolorize_obj$centers),
base_color = base_color,
asp = dim(base_layer)[1] / dim(base_layer)[2])
class(p) <- "recolorizeVector"
# vectorize each layer
for (i in 1:length(layers)) {
# get polygons
pol <- raster::rasterToPolygons(raster::raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = smoothness)
# add to list
p$layers[[i]] <- pol
}
# if plotting, put base layer first and then add the rest
if (plotting) {
# initialize plot
sp::plot(b, col = base_color, border = p$base_color,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2],
xlim = c(0, 1), ylim = c(0, 1),
...)
for (i in 1:length(p$layers)) {
# rgb colors
col <- p$layer_colors[i]
# add to plot
sp::plot(p$layers[[i]],
col = col,
border = col,
add = TRUE,
...)
}
}
return(p)
}
rcv <- recolorizeVector(rc)
sf::plot_sf(rcv$base_layer, col = rcv$base_color, border = rcv$base_color, asp = rcv$asp)
class(rcv$base_layer)
sf::as_Spatial(rcv$base_layer)
?sf::as_Spatial
x <- as(rcv$base_layer, "Spatial")
class(x)
x <- as(rcv$base_layer, "sf")
class(x)
plot(x)
pol
# get polygon
b <- raster::rasterToPolygons(raster::raster(base_layer),
fun = function(x) x > 0,
dissolve = TRUE)
b
# initialize polygon list
p <- list(base_layer = as(b, "sf"),
layers = vector("list", length(nrow(recolorize_obj$centers))),
layer_colors = grDevices::rgb(recolorize_obj$centers),
base_color = base_color,
asp = dim(base_layer)[1] / dim(base_layer)[2])
class(p) <- "recolorizeVector"
# vectorize each layer
for (i in 1:length(layers)) {
# get polygons
pol <- raster::rasterToPolygons(raster::raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = smoothness)
# add to list
p$layers[[i]] <- as(pol, "sf")
}
smoothness = 1
# initialize polygon list
p <- list(base_layer = as(b, "sf"),
layers = vector("list", length(nrow(recolorize_obj$centers))),
layer_colors = grDevices::rgb(recolorize_obj$centers),
base_color = base_color,
asp = dim(base_layer)[1] / dim(base_layer)[2])
class(p) <- "recolorizeVector"
# vectorize each layer
for (i in 1:length(layers)) {
# get polygons
pol <- raster::rasterToPolygons(raster::raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = smoothness)
# add to list
p$layers[[i]] <- as(pol, "sf")
}
# initialize plot
sf::plot(b, col = base_color, border = p$base_color,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2],
xlim = c(0, 1), ylim = c(0, 1),
...)
plot(b, col = base_color, border = p$base_color, asp = dim(layers[[1]])[1] / dim(layers[[1]])[2], xlim = c(0, 1), ylim = c(0, 1))
plot(b)
class(b)
b <- as(b, "sf")
plot(b, col = base_color, border = p$base_color, asp = dim(layers[[1]])[1] / dim(layers[[1]])[2], xlim = c(0, 1), ylim = c(0, 1))
devtools::load_all(".")
rm(list = c("recolorizeVector"))
devtools::load_all(".")
par(mar = rep(0, 4))
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
v
v$base_layer
v$base_layer <- as(v$base_layer, "sf")
v$layers
for (i in 1:length(v$layers)) {v$layers[[i]] <- as(v$layers[[i]], "sf")}
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
#v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
#v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
rm(v, rc)
plot(rc)
?recolorize2
img <- system.file("extdata/corbetti.png", package = "recolorize")
# fit recolorize:
rc <- recolorize2(img, bins = 2, cutoff = 45)
?recolorizeVector
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
as_vector <- recolorizeVector(rc, smoothness = 5,
size_filter = 0.05)
plot(as_vector)
devtools::load_all(".")
plot(as_vector)
plot(as_vector)
x
as_vector$asp
plot(as_vector$layers[[1]], asp = as_vector$asp)
x <- as_vector
plot(x$base_layer, col = x$base_color,
border = x$base_color,
asp = x$asp)
for (i in 1:length(x$layers)) {
# rgb colors
col <- x$layer_colors[i]
# add to plot
plot(x$layers[[i]],
col = col,
border = col,
add = TRUE,
asp = x$asp)
}
plot(x$base_layer, col = x$base_color,
border = x$base_color,
asp = x$asp, xlim = c(0, 1), ylim = c(0, 1))
plot(x$layers[[i]],
col = col,
border = col,
add = TRUE,
asp = x$asp)
x$layers[[1]]
?sf::plot.sf
class(x$layers[[1]])
class(x$base_layer)
x$layers[[1]]
x$layers[[1]][1, ]
x$layers[[1]][ , 1]
x$layers[[1]][ , 2]
plot(x$base_layer, col = x$base_color,
border = x$base_color,
asp = x$asp, reset = FALSE)
plot(x$layers[[i]],
col = col,
border = col,
add = TRUE,
asp = x$asp)
devtools::load_all(".")
plot(as_vector)
devtools::load_all(".")
plot(v)
saveRDS("extdata/msc/corbetti_vector.rds")
saveRDS(as_vector, "extdata/msc/corbetti_vector.rds")
saveRDS(object = as_vector, file = "extdata/msc/corbetti_vector.rds")
saveRDS(object = as_vector, file = "~/corbetti_vector.rds")
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
rm(v, rc)
devtools::load_all(".")
par(mar = rep(0, 4))
library(recolorize)
install.packages("qpdf")
?recolorizeVector
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
# to reset graphical parameters:
current_par <- graphics::par(no.readonly = TRUE)
# takes ~10 seconds
as_vector <- recolorizeVector(rc, smoothness = 5,
size_filter = 0.05)
plot(as_vector)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plot(as_vector)
img_path <- "../tmp/IEB00465_06_R.tif"
devtools::load_all(".")
x <- readImage(img_path, resize = 0.5)
plotImageArray(x)
x2 <- recolorize(x)
img <- x
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
lower = NULL
upper = NULL
transparent= F
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
method = "histogram"
n = 2
bins = 2
color_space = "sRGB"
ref_white = "D65"
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
s <- sizes
# returnables:
original_img <- img
a <- matrix(1, nrow = nrow(original_img), ncol = ncol(original_img))
a[bg_indexed$idx_flat] <- 0
dim(a)
bg_indexed$idx_flat
a <- matrix(1, nrow = nrow(original_img), ncol = ncol(original_img))
dim(a)
devtools::load_all(".")
x2 <- recolorize(x)
install.packages("roxygen2")
install.packages("smoothr")
