par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
rm(v, rc)
devtools::load_all(".")
par(mar = rep(0, 4))
library(recolorize)
install.packages("qpdf")
?recolorizeVector
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
# to reset graphical parameters:
current_par <- graphics::par(no.readonly = TRUE)
# takes ~10 seconds
as_vector <- recolorizeVector(rc, smoothness = 5,
size_filter = 0.05)
plot(as_vector)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plot(as_vector)
img_path <- "../tmp/IEB00465_06_R.tif"
devtools::load_all(".")
x <- readImage(img_path, resize = 0.5)
plotImageArray(x)
x2 <- recolorize(x)
img <- x
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
lower = NULL
upper = NULL
transparent= F
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
method = "histogram"
n = 2
bins = 2
color_space = "sRGB"
ref_white = "D65"
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
s <- sizes
# returnables:
original_img <- img
a <- matrix(1, nrow = nrow(original_img), ncol = ncol(original_img))
a[bg_indexed$idx_flat] <- 0
dim(a)
bg_indexed$idx_flat
a <- matrix(1, nrow = nrow(original_img), ncol = ncol(original_img))
dim(a)
devtools::load_all(".")
x2 <- recolorize(x)
install.packages("roxygen2")
install.packages("smoothr")
img <- system.file("extdata/chongi.png", package = "recolorize")
img
img <- system.file("extdata/corbetti.png", package = "recolorize")
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im2 <- system.file("extdata/corbetti.png", package = "recolorize")
im1
im2
rc1 <- recolorize(im1)
devtools::load_all(".")
rc1 <- recolorize(im1)
rc2 <- recolorize(im2)
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
rc1$sizes
rc2$sizes
rc1$centers
rc2$centers
img <- im1
img <- readImage(im1)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
lower
lower = NULL
upper = NULL
transparent=TRUE
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
bg_conditio
bg_condition
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
pixel_matrix <- bg_indexed$non_bg
bins = 2
color_space = "sRGB"
ref_white = "D65"
# first, convert to color space for clustering:
pm <- col2col(pixel_matrix,
from = "sRGB",
to = color_space,
ref_white = ref_white)
pm
bins <- rep(bins, 3)
#sRGB/HSV range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
breaks
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
binned_image
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
possible_bins
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
centers
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image)
d
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
pixel_assignments
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
# make a vector for sizes
sizes <- rep(0, prod(bins))
dim(d)
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
centers
dim(d)[1]
d
pixel_assignments
unique(pixel_assignments)
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
devtools::load_all(".")
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im2 <- system.file("extdata/corbetti.png", package = "recolorize")
rc1 <- recolorize(im1)
rc2 <- recolorize(im2)
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2))
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
?mgcv::uniquecombs
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
plotColorPalette(rc1$centers)
plotColorPalette(rc2$centers)
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
bins = 3
pm1 <- bg_indexed$non_bg
img <- readImage(im2)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
pm2 <- bg_indexed$non_bg
bins = 3
pm <- pm1
bins <- rep(bins, 3)
#sRGB/HSV range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
pm <- pm2
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
d
centers
possible_bins
j
j = 1
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
j
d[j, ]
possible_bins
paste0(d[j, ])
paste0(d[j, ], collapse = "")
match(paste0(d[j, ], collapse = ""), apply(possible_bins, j)
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, )
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = ""))
)
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
j = 27
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
d[j, ]
d
dim(d)
j = 25
match(paste0(d[j, ], collapse = ""), apply(possible_bins, 1, \(x) paste0(x, collapse = "")))
# for matching
bin_names <- apply(possible_bins, 1,
\(x) paste0(x, collapse = ""))
# match to possible_bins bin
match(paste0(d[j, ], collapse = ""),
bin_names)
pixel_assignments_2 <- matrix(0,
nrow = nrow(pixel_assignments),
ncol = ncol(pixel_assignments))
nrow(pixel_assignments)
pixel_assignments
length(pixel_assignments)
dim(pixel_assignments)
pixel_assignments_2 <- rep(0, length(pixel_assignments))
devtools::load_all(".")
rc1 <- recolorize(im1, bins = 3)
rc2 <- recolorize(im2, bins = 3)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(rc1$centers, rc1$sizes)
plotColorPalette(rc2$centers, rc2$sizes)
plotColorPalette(rc1$centers, cex_text = 0.6)
plotColorPalette(rc2$centers, cex_text = 0.6)
library(colordistance)
cd1 <- getImageHist(im1)
cd2 <- getImageHist(im2)
cd1 <- getImageHist(im1, bin.avg = F)
cd2 <- getImageHist(im2, bin.avg = F)
cd1 <- getImageHist(im1, bins = 2, bin.avg = F)
cd2 <- getImageHist(im2, bins = 2, bin.avg = F)
,
roxygen2::roxygenize()
devtools::load_all(".")
img <- system.file("extdata/chongi.png", package = "recolorize")
rc <- recolorize(img)
rc <- recolorize(img, bin_avg = F)
rc$centers
pm
pixel_matrix <- matrix(runif(300), ncol = 3)
bins = 2
color_space = "sRGB"
bin_avg = FALSE
ref_white = "D65"
# make sure bins is either a number or a vector of length 3
stopifnot(length(bins) == 1 | 3)
# match argument for color space
color_space <- match.arg(color_space)
# first, convert to color space for clustering:
pm <- col2col(pixel_matrix,
from = "sRGB",
to = color_space,
ref_white = ref_white)
# format bins
if (length(bins) == 1) {
message(paste("\nUsing ", bins, "^3 = ", paste(bins^3),
" total bins", sep = ""))
bins <- rep(bins, 3)
} else {
message(paste("\nUsing ", bins[1], "*", bins[2],
"*", bins[3], " = ", bins[1] * bins[2] * bins[3],
" bins", sep = ""))
}
# color space ranges
if (color_space == "Lab") {
# Lab is 0-100 (L), -127-127 (a and b)
# HOWEVER, these extremes are virtually unoccupied by RGB colors
# these are a little outside the range of sRGB in Lab space:
brange <- list(c(0, 100),
c(-90, 100),
c(-110, 95))
}  else if (color_space == "Luv") {
# please don't ever ask me about this
brange <- list(c(0, 100),
c(-85, 175),
c(-135, 107))
} else {
#sRGB/HSV range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
}
brange
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
breaks
# bin the image?
binned_image <- data.frame(c1 = cut(pm[, 1], breaks = breaks[[1]],
include.lowest = T, labels = F),
c2 = cut(pm[, 2], breaks = breaks[[2]],
include.lowest = T, labels = F),
c3 = cut(pm[, 3], breaks = breaks[[3]],
include.lowest = T, labels = F))
# possible bins!
possible_bins <- expand.grid(c(1:bins[1]),
c(1:bins[2]),
c(1:bins[3]))
# defaults = centers of bins
break_means <- lapply(breaks, function(i) sapply(2:length(i),
function(m) mean(c(i[m-1], i[m]))))
centers <- as.matrix(expand.grid(break_means))
colnames(centers) <- strsplit(gsub("s", "", color_space), "")[[1]]
centers
# how many pixels in each bin?
d <- mgcv::uniquecombs(binned_image, ordered = TRUE)
# which bin does each pixel go in?
pixel_assignments <- attr(d, "index")
pixel_assignments_2 <- rep(0, length(pixel_assignments))
# make a vector for sizes
sizes <- rep(0, prod(bins))
# for matching
bin_names <- apply(possible_bins, 1,
\(x) paste0(x, collapse = ""))
bin_names
j = 1
# match to possible_bins bin
bin_idx <- match(paste0(d[j, ], collapse = ""),
bin_names)
bin_idx
# extract all the pixels in that bin
pix_temp <- pm[which(pixel_assignments == j), ]
pix_temp
pixel_assignments_2[which(pixel_assignments == j)] <- bin_idx
devtools::load_all(".")
rc <- recolorize(img, bin_avg = F)
rc <- recolorize(img, bin_avg = F, bins = 3)
rc <- recolorize(img, bin_avg = T, bins = 3)
rc <- recolorize(img, bin_avg = F, bins = 3)
rc <- recolorize(img, bin_avg = F, bins = 3, color_space = "Lab")
img <- system.file("extdata/chongi.png", package = "recolorize")
rc_bin_avg <- recolorize(img, bins = 2)
rc_bin_avg <- recolorize(img, bins = 2, bin_avg = F)
im1 <- system.file("extdata/chongi.png", package = "recolorize")
im2 <- system.file("extdata/corbetti.png", package = "recolorize")
devtools::load_all(".")
rc <- recolorize(im1)
rc <- recolorize(im1)
rc <- recolorize(im2)
plot(rc)
rc2 <- mergeLayers(rc, list(c(3, 4),
c(5, 7),
c(2, 5)))
rc2 <- mergeLayers(rc, list(c(3, 4),
c(5, 7),
c(2, 6)))
rc <- recolorize(im2, bins = 3)
plot(rc)
rc$zi
rc$sizes
rc2 <- mergeLayers(rc, list(c(1:6),
c(7:12)))
rc2 <- mergeLayers(rc, list(c(1:6),
c(7:12)), remove_empty_centers = F)
rc <- recolorize(im2, bins = c(2, 3, 3))
plot(rc)
rc$sizes
rc <- recolorize2(im2)
rc <- recolorize2(im2, cutoff = 45)
plot(rc)
rc$centers
rc$centers <- rbind(rc$centers, c(0, 0, 0))
rc$centers
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc <- recolorize2(im2)
plot(rc)
rc <- recolorize(im2)
plot(rc)
rc$centers <- rbind(rc$centers, c(0, 0, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2$centers
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
plot(rc, sizes = T)
# add an extra empty center (bright yellow)
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
plot(rc)
# recolorize & plot
rc <- recolorize(im)
# get an image that comes with the package
im <- system.file("extdata/corbetti.png", package = "recolorize")
# recolorize & plot
rc <- recolorize(im)
plot(rc)
# add an extra empty center (bright yellow)
rc$centers <- rbind(rc$centers, c(1, 1, 0))
rc$sizes <- c(rc$sizes, 0)
# plot with sizes = FALSE to see the empty center:
plot(rc, sizes = FALSE)
# vs. it does not appear when sizes = TRUE:
plot(rc, sizes = TRUE)
# use mergeLayers with remove_empty_centers = F
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = T)
# use mergeLayers with remove_empty_centers = F
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = F)
rc2$centers
# vs. if we set to TRUE:
rc2 <- mergeLayers(rc, list(c(2, 6),
c(3, 4),
c(5, 7)),
remove_empty_centers = T)
